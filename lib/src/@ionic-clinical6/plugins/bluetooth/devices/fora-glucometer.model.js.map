{"version":3,"sources":["../src/@ionic-clinical6/plugins/bluetooth/devices/fora-glucometer.model.ts"],"names":[],"mappings":"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","file":"fora-glucometer.model.js","sourcesContent":["import { bluetoothCharacteristics, bluetoothServices, getKeyFromValue, createMask } from '../bluetooth.utility';\nimport { BluetoothCharacteristic } from '../bluetooth-characteristic.model';\nimport { BluetoothDevice } from './bluetooth-device.model';\nimport { Observable } from 'rxjs/Observable';\nimport { BLEService } from '../ble.service';\n\nexport class ForaGlucometer extends BluetoothDevice {\n  public dateTime: Date;\n  public glucoseLevel: number;\n  public dateTimeRaw: any;\n  public glucoseLevelRaw: any;\n  public valueTypeRaw: any;\n\n  getGlucoseLevel(): Observable<any> {\n    return Observable.create((observer) => {\n      console.log('start transferring data');\n      const self = this;\n      try {\n      // For FORA device only.\n      // all FORA devices commands and retreival are [ start, cmd, data_0, data_2, data_3, data_4, end ]\n      const service = '00001523-1212-EFDE-1523-785FEABCD123';\n      const characteristic = '00001524-1212-EFDE-1523-785FEABCD123';\n      // const service = '1523';\n      // const characteristic = '1524';\n      const start = 0x51;\n      const end = 0xa3;\n      const _dateTimeCmd = 0x25; // command to get date/time\n      const _valueTypeCmd = 0x26; // command to get value (glucose)\n      const _dateTime = [start, _dateTimeCmd, 0x00, 0x00, 0x00, 0x00, end]; // data_0 and data_1 are the index for storage\n      const _valueType = [start, _valueTypeCmd, 0x00, 0x00, 0x00, 0x00, end];\n      const sum = (array) => array.reduce((a, b) => a + b, 0);\n      _dateTime.push(sum(_dateTime));\n      _valueType.push(sum(_valueType));\n      // const checksum1 = [0x51, 0x25, 0x00, 0x00, 0x00, 0x00, 0xa3].reduce((a, b) => a + b, 0).toString(16); //  = 0x11a\n      // const checksum2 = [0x51, 0x26, 0x00, 0x00, 0x00, 0x00, 0xa3].reduce((a, b) => a + b, 0).toString(16);\n      let data1, data2;\n      this.ble.startNotification(this.id, service, characteristic).subscribe(raw => {\n        const data = new Uint8Array(raw);\n        console.log(`data raw`, raw);\n        console.log(`data Uint8Array`, data);\n        console.log(`data stringified`, JSON.stringify(data));\n        console.log(`data fromCharCode`, String.fromCharCode.apply(null, data));\n\n        // data should be [start, cmd, data_0, data_1, data_2, data_3, end ]\n        if (data[0] === start) {\n          switch (data[1]) {\n            case _dateTimeCmd:\n              this.dateTimeRaw = data;\n              const dateBytes = (((data[3] & 0xff) << 8) | (data[2] & 0xff)); // 16 bit, data_1 | data_0\n              let day = createMask(0, 4) & dateBytes; // 5 bit\n              let month = createMask(0, 3) & (dateBytes >> 5); // 4 bit\n              let year = createMask(0, 6) & (dateBytes >> 9); // 7 bit\n\n              // const timeBytes = (((data[5] & 0xff) << 8) | (data[4] & 0xff));\n              let hour = data[5]; // 5 bit data_3\n              let minute = data[4]; // 6 bit data_2\n              console.log(`20${year}-${month}-${day} ${hour}:${minute}`);\n              this.dateTime = new Date(`20${year}-${month}-${day} ${hour}:${minute}`);\n              break;\n            case _valueTypeCmd:\n              this.glucoseLevelRaw = data;\n              // data_1, data_0 are glucose\n              self.glucoseLevel = (((data[3] & 0xff) << 8) | (data[2] & 0xff)); // combine bytes\n              console.log('MY GLUCOSE LEVEL', self.glucoseLevel);\n\n              // data_3, data_2 are type 1 / type 2\n              // _____________data_3_______________ | ___________data_2________________|\n              // | type 1  | type 2 (4 bits) |          code (10 bits)                 |\n              // [ 1 , 0  ] [ 3 , 2 , 1 , 0 ] [ 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 , 0 ]\n\n              // type 1\n              // 0x0: Gen\n              // 0x1: AC (before meal)\n              // 0x2: PC (after meal)\n              // 0x3: QC (quality control)\n              // type 2\n              // 0x0: Gen.\n              // 0x6: Hematocrit.\n              // 0x7: Ketone value\n              // Hematocrit record: Type I + Type II =0x36 Ketone record: Type I + Type II =0x07 or 0x37\n              observer.next(self);\n              break;\n            default: break;\n            }\n          }\n        });\n        this.ble.write(this.id, service, characteristic, new Uint8Array(_dateTime).buffer  as ArrayBuffer).then(data => data1 = data).catch(err => console.log(err))\n        // example uint array for date / time\n        // 81,37,68,34,36,12,165,177\n\n        .then(() => this.ble.write(this.id, service, characteristic, new Uint8Array(_valueType).buffer  as ArrayBuffer).then(data => data2 = data).catch(err => console.log(err)));\n        // example uint array for glucose\n        // 81,38,107,0,0,0,165,135\n      } catch (e) {\n        console.log('error', e.message);\n      }\n    });\n  }\n  constructor(response: any, public ble: BLEService) {\n    super(response, ble);\n  }\n}\n"]}