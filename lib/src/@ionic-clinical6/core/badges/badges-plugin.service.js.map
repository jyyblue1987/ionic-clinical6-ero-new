{"version":3,"sources":["../src/@ionic-clinical6/core/badges/badges-plugin.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AACtC,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAClD,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAC,MAAM,gBAAgB,CAAC;AAE9D;;;GAGG;AAEH,IAAa,mBAAmB,GAAhC;IAWE;IACA,CAAC;IAED;;;;;OAKG;IACG,IAAI,CAAC,KAAe,EAAE,SAAmB,EAAE,kBAA2B;;YACxE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;YACvB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACxB,IAAI,CAAC;gBACD,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,EAAE,kBAAkB,CAAC,CAAC;YACjE,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,OAAO,CAAC,GAAG,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;YAChE,CAAC;QACL,CAAC;KAAA;IAED;;;;;OAKG;IACW,WAAW,CAAC,KAAK,EAAE,SAAS,EAAE,kBAAkB;;YAC1D,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;YACvB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACxB,IAAI,aAAa,CAAC;YAClB,IAAI,iBAAiB,CAAC;YACtB,IAAI,CAAC;gBACD,IAAI,cAAc,GAAG,MAAM,SAAS,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC,0BAA0B;gBAC3F,IAAI,YAAY,GAAG,IAAI,YAAY,CAAC,EAAC,eAAe,EAAE,WAAW,EAAC,CAAC,CAAC;gBACpE,aAAa,GAAG,MAAM,YAAY,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;gBAC/D,iBAAiB,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,8BAA8B;YACvF,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,OAAO,CAAC,GAAG,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC7D,CAAC;YACD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,IAAI,CAAC;oBACH,GAAG,CAAC,CAAC,IAAI,OAAO,IAAI,iBAAiB,CAAC,IAAK,CAAC,CAAC,CAAC;wBAC5C,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,EAAE,kBAAkB,CAAC,CAAC;oBAChE,CAAC;oBACD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;oBAChD,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;gBAExC,CAAC;gBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACf,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;gBAC1D,CAAC;YACH,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,kEAAkE;gBAClE,GAAG,CAAC,CAAC,IAAI,OAAO,IAAI,iBAAiB,CAAC,IAAK,CAAC,CAAC,CAAC;oBAC1C,IAAI,gBAAgB,GAAG,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;oBACtI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC5C,CAAC;gBACH,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YAC1C,CAAC;QACL,CAAC;KAAA;IAEK,kBAAkB;;YACtB,IAAI,CAAC;gBACH,IAAI,iBAAiB,GAAG,MAAM,SAAS,CAAC,KAAK,CAAC,oBAAoB,SAAS,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,8BAA8B;gBAC7H,MAAM,CAAC,iBAAiB,CAAC;YAC3B,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;KAAA;IAED;;;;OAIG;IACG,UAAU,CAAC,OAAO,EAAE,SAAS,EAAE,kBAAkB;;YACrD,IAAI,CAAC;gBACH,IAAI,SAAS,GAAG,MAAM,SAAS,CAAC,KAAK,CAAC,oBAAoB,SAAS,CAAC,IAAI,CAAC,EAAE,WAAW,OAAO,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,qBAAqB;gBACjI,IAAI,YAAY,GAAG,KAAK,CAAC,CAAC,yBAAyB;gBACnD,IAAI,UAAU,GAAG,CAAC,CAAC;gBACnB,GAAG,CAAC,CAAE,IAAI,OAAO,IAAI,SAAS,CAAC,IAAK,CAAC,CAAC,CAAC;oBACrC,EAAE,CAAC,CAAE,SAAU,CAAC,CAAC,CAAC;wBAChB,EAAE,CAAC,CAAE,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,KAAK,kBAAkB;+BAC9D,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,OAAO,CAAC,EAAG,CAAC,CAAC,CAAC;4BAC9D,YAAY,GAAG,IAAI,CAAC;4BACpB,KAAK,CAAC;wBACV,CAAC;wBACD,IAAI;4BAAC,YAAY,GAAG,KAAK,CAAC;oBAC1B,CAAC;oBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAC,CAAE,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,OAAO,CAAC,EAAG,CAAC,CAAC,CAAC;4BAC5D,UAAU,EAAE,CAAC;wBACf,CAAC;oBACH,CAAC;gBACH,CAAC;gBACD,+DAA+D;gBAC/D,IAAI,gBAAgB,GAAG,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;gBACtJ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAElD,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;YAC7C,CAAC;QACH,CAAC;KAAA;IAED;;;OAGG;IACK,UAAU,CAAC,aAAa,EAAE,KAAM;QACpC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,aAAa,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,sBAAsB;QACrE,CAAC;QACD,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1B,GAAG,CAAC,CAAC,IAAI,SAAS,IAAI,GAAG,CAAC,CAAC,CAAC;gBACxB,EAAE,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;oBACxB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC,8BAA8B;gBACtF,CAAC;YACL,CAAC;QACL,CAAC;QACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACK,SAAS,CAAC,WAAW,EAAE,KAAK,EAAE,KAAM;QACxC,EAAE,CAAA,CAAC,KAAK,CAAC,CAAC,CAAC;YACP,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClB,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACvB,CAAC;YACD,IAAI,IAAI,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;YAClC,EAAE,CAAC,CAAE,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,KAAK,CAAE,CAAC,CAAC,CAAC;gBAC3E,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACnB,CAAC;YACH,IAAI,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YACxD,IAAI,aAAa,EAAE,UAAU,EAAE,SAAS,EAAE,YAAY,EAAE,WAAW,EAAE,UAAU,CAAC;YAChF,EAAE,CAAC,CAAE,WAAY,CAAC,CAAC,CAAC;gBAClB,aAAa,GAAG,IAAI,CAAC;gBACrB,UAAU,GAAG,WAAW,CAAC,GAAG,CAAC;gBAC7B,SAAS,GAAG,WAAW,CAAC,EAAE,CAAC;gBAC3B,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC;gBAC/B,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC;gBAC/B,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC;YAClC,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,aAAa,GAAG,KAAK,CAAC;gBACtB,UAAU,GAAG,KAAK,CAAC;gBACnB,SAAS,GAAG,IAAI,CAAC;gBACjB,YAAY,GAAG,iCAAiC,CAAC;gBACjD,WAAW,GAAG,IAAI,CAAC;gBACnB,UAAU,GAAG,CAAC,CAAC;YACjB,CAAC;YACD,IAAI,SAAS,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,YAAY,EAAE,KAAK,CAAC,WAAW,EAC1C,KAAK,CAAC,EAAE,EAAE,SAAS,EAAE,aAAa,EAClC,WAAW,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YACjE,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC1C,CAAC;QACD,IAAI,CAAC,CAAC;YACF,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClB,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACvB,CAAC;YACD,IAAI,IAAI,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;YAClC,EAAE,CAAC,CAAE,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,KAAK,CAAE,CAAC,CAAC,CAAC;gBAC3E,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACnB,CAAC;YACH,IAAI,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACjD,IAAI,aAAa,EAAE,UAAU,EAAE,SAAS,EAAE,YAAY,EAAE,WAAW,EAAE,UAAU,CAAC;YAChF,EAAE,CAAC,CAAE,WAAY,CAAC,CAAC,CAAC;gBAClB,aAAa,GAAG,IAAI,CAAC;gBACrB,SAAS,GAAG,WAAW,CAAC,EAAE,CAAC;gBAC3B,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC;gBAC/B,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC;YACjC,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,aAAa,GAAG,KAAK,CAAC;gBACtB,SAAS,GAAG,IAAI,CAAC;gBACjB,YAAY,GAAG,iCAAiC,CAAC;gBACjD,WAAW,GAAG,IAAI,CAAC;YACrB,CAAC;YACD,IAAI,SAAS,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,YAAY,EAAE,KAAK,CAAC,WAAW,EAC1C,KAAK,CAAC,EAAE,EAAE,SAAS,EAAE,aAAa,EAClC,WAAW,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YACjE,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC1C,CAAC;IAEH,CAAC;IAEF;;;OAGG;IACM,eAAe,CAAC,iBAAiB,EAAE,KAAK;QAC9C,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1B,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC7B,CAAC;QACD,IAAI,IAAI,GAAG,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;QACxC,iBAAiB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACK,eAAe,CAAC,EAAE,EAAE,KAAM;QAC9B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,aAAc,CAAC,CAAC,CAAC;gBACnC,EAAE,CAAC,CAAE,IAAI,CAAC,OAAO,KAAK,EAAE,CAAC,QAAQ,EAAG,CAAC,CAAC,CAAC;oBACrC,MAAM,CAAC;wBACL,EAAE,EAAE,IAAI,CAAC,SAAS;wBAClB,GAAG,EAAE,IAAI,CAAC,YAAY;wBACtB,IAAI,EAAE,IAAI,CAAC,WAAW;wBACtB,MAAM,EAAE,IAAI,CAAC,UAAU;qBACxB,CAAC;gBACJ,CAAC;YACH,CAAC;QACL,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,aAAc,CAAC,CAAC,CAAC;gBACnC,EAAE,CAAC,CAAE,IAAI,CAAC,OAAO,KAAK,EAAE,CAAC,QAAQ,EAAG,CAAC,CAAC,CAAC;oBACrC,MAAM,CAAC;wBACL,EAAE,EAAE,IAAI,CAAC,SAAS;wBAClB,GAAG,EAAE,IAAI;wBACT,IAAI,EAAE,IAAI,CAAC,WAAW;wBACtB,MAAM,EAAE,IAAI;qBACb,CAAC;gBACJ,CAAC;YACH,CAAC;QACL,CAAC;IACL,CAAC;IAED,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC;QACZ,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;QAC7B,EAAE,CAAC,CAAC,IAAI,KAAK,cAAc,CAAC;YAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;QAC5D,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IAED,aAAa,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS;QACjC,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;QAC7B,EAAE,CAAC,CAAC,IAAI,KAAK,cAAc,CAAC;YAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;QAC5D,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,EAAE,CAAC,CAAC,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAE,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAE,CAAC;gBAAC,QAAQ,GAAG,IAAI,CAAC;QAC5C,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,CAAE,CAAC,CAAC,KAAK,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAE,CAAC;gBAC5E,QAAQ,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,EAAE,CAAC,CAAE,CAAC,CAAC,KAAK,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,IAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,KAAK,IAAK,CAAC;gBACvG,QAAQ,GAAG,IAAI,CAAC;QACpB,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAED,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC;QACb,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;QAC7B,EAAE,CAAC,CAAC,IAAI,KAAK,cAAc,CAAC;YAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;QAC5D,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,EAAE,CAAC,CAAC,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACrC,EAAE,CAAC,CAAE,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,KAAM,CAAC;gBACnC,GAAG,EAAE,CAAC;QACV,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAE,GAAG,GAAG,UAAU,CAAC,MAAM,GAAG,CAAE,CAAC,CAAC,CAAC;YACvC,GAAG,GAAG,CAAC,CAAC;YACR,GAAG,EAAE,CAAC;QACR,CAAC;QACD,MAAM,CAAC;YACL,IAAI,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;YAC1B,CAAC,EAAE,GAAG;YACN,CAAC,EAAE,GAAG;SACP,CAAC;IACJ,CAAC;IAED,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC;QACb,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;QAC7B,EAAE,CAAC,CAAC,IAAI,KAAK,cAAc,CAAC;YAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;QAC5D,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACZ,GAAG,EAAE,CAAC;QACR,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAE,GAAG,GAAG,CAAE,CAAC,CAAC,CAAC;YACnB,GAAG,EAAE,CAAC;YACN,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QACnC,CAAC;QACD,MAAM,CAAC;YACL,IAAI,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;YAC1B,CAAC,EAAE,GAAG;YACN,CAAC,EAAE,GAAG;SACP,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,EAAE;QACT,GAAG,CAAC,CAAE,IAAI,IAAI,IAAI,IAAI,CAAC,MAAO,CAAC,CAAC,CAAC;YAC/B,GAAG,CAAC,CAAE,IAAI,EAAE,IAAI,IAAK,CAAC,CAAC,CAAC;gBACtB,EAAE,CAAC,CAAE,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,KAAK,EAAG,CAAC,CAAC,CAAC;oBAC9C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;gBAC5B,CAAC;YACH,CAAC;QACH,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACG,IAAI,CAAC,SAAgB,EAAE,SAAU,EAAE,kBAA2B;;YAClE,IAAI,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,EAAE,kBAAkB,CAAC,CAAC;YAC3E,IAAI,CAAC;gBACH,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;oBACvB,IAAI,IAAI,GAAG;wBACT,IAAI,EAAG;4BACL,IAAI,EAAE,OAAO;4BACb,aAAa,EAAE;gCACb,YAAY,EAAE;oCACV,IAAI,EAAE;wCACF,IAAI,EAAE,cAAc;wCACpB,EAAE,EAAE,kBAAkB;qCAC3B;iCACF;gCACD,QAAQ,EAAE;oCACN,IAAI,EAAE;wCACF,IAAI,EAAE,gBAAgB;wCACtB,EAAE,EAAE,SAAS,CAAC,SAAS,CAAC,4CAA4C;qCACzE;iCACF;6BACF;yBACF;qBACF,CAAC;oBACF,IAAI,QAAQ,GAAG,MAAM,SAAS,CAAC,KAAK,CAAC,oBAAoB,SAAS,CAAC,IAAI,CAAC,EAAE,WAAW,SAAS,CAAC,SAAS,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;gBAClI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;oBAC3B,IAAI,QAAQ,GAAG,MAAM,SAAS,CAAC,KAAK,CAAC,oBAAoB,SAAS,CAAC,IAAI,CAAC,EAAE,WAAW,SAAS,CAAC,SAAS,UAAU,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;gBACzJ,CAAC;gBACD,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,EAAE,kBAAkB,CAAC,CAAC;YAC9E,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,OAAO,CAAC,GAAG,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACxD,CAAC;QACH,CAAC;KAAA;IAED;;;;;OAKG;IACG,SAAS,CAAC,SAAgB,EAAE,SAAmB,EAAE,kBAA2B;;YAChF,EAAE,CAAC,CAAE,SAAS,CAAC,SAAU,CAAC,CAAC,CAAC;gBAC1B,IAAI,CAAC;oBACH,IAAI,QAAQ,GAAG,MAAM,SAAS,CAAC,KAAK,CAAC,oBAAoB,SAAS,CAAC,IAAI,CAAC,EAAE,WAAW,SAAS,CAAC,SAAS,QAAQ,EAAE,KAAK,CAAC,CAAC;oBACzH,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC7B,IAAI,KAAK,GAAG,IAAI,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;wBACpC,GAAG,CAAC,CAAE,IAAI,IAAI,IAAI,QAAQ,CAAC,IAAK,CAAC,CAAC,CAAC;4BACjC,EAAE,CAAC,CAAE,SAAU,CAAC,CAAC,CAAC;gCAChB,EAAE,CAAC,CAAE,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,KAAK,kBAAkB,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,SAAS,CAAC,SAAU,CAAC,CAAC,CAAC;oCACnI,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;oCACzB,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC;oCACvB,MAAM,CAAC,KAAK,CAAC;gCACf,CAAC;4BACH,CAAC;wBACH,CAAC;wBACD,MAAM,CAAC,KAAK,CAAC;oBACf,CAAC;oBACD,IAAI,CAAC,CAAC;wBACJ,IAAI,KAAK,GAAG,IAAI,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;wBACpC,MAAM,CAAC,KAAK,CAAC;oBACf,CAAC;gBACH,CAAC;gBACD,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACb,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;gBAC5C,CAAC;YACH,CAAC;QACH,CAAC;KAAA;CACJ,CAAA;AAvYY,mBAAmB;IAD/B,UAAU,EAAE;;GACA,mBAAmB,CAuY/B;SAvYY,mBAAmB","file":"badges-plugin.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { clinical6 } from 'clinical6';\nimport { Deserializer } from 'jsonapi-serializer';\nimport { Badge, AwardedBadge, likeInfo} from './badge-models';\n\n/**\n * A Service for retrieving the badges.\n * This service use a matrix 3*m for storing and displaying the badges that is the one used in our projects.\n */\n@Injectable()\nexport class BadgesPluginService {\n  \n  /** @type {Array} badges - All the badges available on the platform. */\n  badges: Array<any>;\n  /** @type {Array} recentBadges - The recent badges. */\n  recentBadges: Array<any>;\n  /** @type {Array} awardedBadges - The awarded badges. */\n  awardedBadges: Array<any>;\n  /** @type {boolean} loaded - A boolean variable that can be used to know if the data has been loaded. */\n  loaded: boolean;\n\n  constructor() {\n  }\n\n  /**\n   * Use the init() method for starting the badges service.\n   * @param {!boolean} likes - True if you need 'Likes' informations on the badges too, otherwise false.\n   * @param {!boolean} companion - True if you are a companion, otherwise false if study_patient.\n   * @param {!string} companionProfileId - If companion you must enter your profile id for fetching your 'Likes'.\n   */\n  async init(likes?: boolean, companion?: boolean, companionProfileId?: string) {\n      this.loaded = false;\n      this.badges = [];\n      this.recentBadges = [];\n      this.awardedBadges = [];\n      try {\n          await this.fetchBadges(likes, companion, companionProfileId);\n      } catch (error) {\n          console.log('Error initializing the badges service', error);\n      }\n  }\n\n  /** \n   * The private method for retrieving all the badges informations.\n   * @param {!boolean} likes - True if you need 'Likes' informations on the badges too, otherwise false.\n   * @param {!boolean} companion - True if you are a companion, otherwise false if study_patient.\n   * @param {!string} companionProfileId - If companion you must enter your profile id for fetching your 'Likes'.\n   */\n  private async fetchBadges(likes, companion, companionProfileId) {\n      this.badges = [];\n      this.recentBadges = [];\n      this.awardedBadges = [];\n      let allBadgesData;\n      let awardedBadgesData;\n      try {\n          let _allBadgesData = await clinical6.fetch(`/v3/badges`, 'GET'); // fetching all the badges\n          let deserializer = new Deserializer({keyForAttribute: 'camelCase'});\n          allBadgesData = await deserializer.deserialize(_allBadgesData);\n          awardedBadgesData = await this.fetchAwardedBadges(); // fetching the awarded badges\n      } catch (error) {\n          console.log('Error fetching badges informations', error);\n      }\n      if (likes) {\n        try {\n          for (let aw_item of awardedBadgesData.data ) {\n            await this.fetchLikes(aw_item, companion, companionProfileId);\n          }\n          console.log('fetchBadges, data', allBadgesData);\n          this.fillBadges(allBadgesData, likes);\n          \n        } catch (error) {\n          console.log('Error fetching the awarded badges', error);\n        }\n      }\n      else {\n          // building the awarded badges array without the like informations\n          for (let aw_item of awardedBadgesData.data ) {\n              let fullAwardedBadge = new AwardedBadge(aw_item.id, aw_item.relationships.badge.data.id, false, 0, aw_item.attributes.earned_on_date);\n              this.awardedBadges.push(fullAwardedBadge);\n            }\n          this.fillBadges(allBadgesData, likes);\n      }\n  }\n\n  async fetchAwardedBadges() {\n    try {\n      let awardedBadgesData = await clinical6.fetch(`/v3/mobile_users/${clinical6.user.id}/badges`); // fetching the awarded badges\n      return awardedBadgesData;\n    } catch (error) {\n      console.log('Error fetching awarded badges', error);\n    }\n  }\n\n  /**\n   * @param aw_item - The awarded badge.\n   * @param {!boolean} companion - True if you are a companion, otherwise false if study_patient.\n   * @param {!string} companionProfileId - If companion you must enter your profile id for fetching your 'Likes'.\n   */\n  async fetchLikes(aw_item, companion, companionProfileId) {\n    try {\n      let checkLike = await clinical6.fetch(`/v3/mobile_users/${clinical6.user.id}/badges/${aw_item.id}/likes`, 'GET'); // fetching the likes\n            let alreadyLiked = false; // default value to false\n            let likeNumber = 0;\n            for ( let ch_item of checkLike.data ) { // checking if the like exists\n              if ( companion ) { // if companion i need to know if the like exists\n                if ( ch_item.relationships.mobile_user.data.id === companionProfileId\n                    && ch_item.relationships.likeable.data.id === aw_item.id ) {\n                  alreadyLiked = true;\n                  break;\n              }\n              else alreadyLiked = false;\n              }\n              else if (!companion) { // if patient i need to know the number of likes\n                if ( ch_item.relationships.likeable.data.id === aw_item.id ) {\n                  likeNumber++;\n                }\n              }\n            } \n            // building the awarded badges array with the like informations\n            let fullAwardedBadge = new AwardedBadge(aw_item.id, aw_item.relationships.badge.data.id, alreadyLiked, likeNumber, aw_item.attributes.earned_on_date);\n            this.awardedBadges.push(fullAwardedBadge);\n      \n    } catch (error) {\n      console.log('Error fetching likes', error);\n    }\n  }\n\n  /**\n   * @param allBadgesData - All the badges on the platform.\n   * @param {!boolean} likes - True if you need 'Likes' informations on the badges too, otherwise false.\n   */\n  private fillBadges(allBadgesData, likes?) {\n      for (let badge of allBadgesData) {\n          this.fillArray(this.badges, badge, likes); // fill all the badges\n      }\n      for (let row of this.badges) {\n          for (let fullBadge of row) {\n              if (fullBadge.awardedDate) {\n                  this.fillRecentArray(this.recentBadges, fullBadge); // fill only the recent badges\n              }\n          }\n      }\n      this.loaded = true;\n  }\n\n  /**\n   * @param badgesArray - All the badges on the platform.\n   * @param badge - A single badge.\n   * @param {!boolean} likes - True if you need 'Likes' informations on the badges too, otherwise false.\n   */\n  private fillArray(badgesArray, badge, likes?) {\n      if(likes) {\n          if (!badgesArray[0]) {\n              badgesArray.push([]);\n            }\n            let last = badgesArray.length - 1;\n            if ( badgesArray[last].length !== 0 && badgesArray[last].length % 2 === 0 ) {\n              badgesArray.push([]);\n                }\n              let awardedInfo = this.findAwardedInfo(badge.id, likes);\n              let awardedStatus, awardedTap, awardedId, image_earned, awardedDate, likeNumber;\n              if ( awardedInfo ) {\n                awardedStatus = true;\n                awardedTap = awardedInfo.tap;\n                awardedId = awardedInfo.id;\n                image_earned = badge.image.url;\n                awardedDate = awardedInfo.date;\n                likeNumber = awardedInfo.number;\n              }\n              else {\n                awardedStatus = false;\n                awardedTap = false;\n                awardedId = null;\n                image_earned = 'assets/images/badge_missing.png';\n                awardedDate = null;\n                likeNumber = 0;\n              }\n              let fullBadge = new Badge(badge.title, image_earned, badge.description, \n                                          badge.id, awardedId, awardedStatus, \n                                          awardedDate, awardedTap, likeNumber);\n              badgesArray[last].push(fullBadge);\n      }\n      else {\n          if (!badgesArray[0]) {\n              badgesArray.push([]);\n            }\n            let last = badgesArray.length - 1;\n            if ( badgesArray[last].length !== 0 && badgesArray[last].length % 2 === 0 ) {\n              badgesArray.push([]);\n                }\n              let awardedInfo = this.findAwardedInfo(badge.id);\n              let awardedStatus, awardedTap, awardedId, image_earned, awardedDate, likeNumber;\n              if ( awardedInfo ) {\n                awardedStatus = true;\n                awardedId = awardedInfo.id;\n                image_earned = badge.image.url;\n                awardedDate = awardedInfo.date;\n              }\n              else {\n                awardedStatus = false;\n                awardedId = null;\n                image_earned = 'assets/images/badge_missing.png';\n                awardedDate = null;\n              }\n              let fullBadge = new Badge(badge.title, image_earned, badge.description, \n                                          badge.id, awardedId, awardedStatus, \n                                          awardedDate, awardedTap, likeNumber);\n              badgesArray[last].push(fullBadge);\n      }\n      \n    }\n\n   /**\n    * @param recentBadgesArray - The array of recent badges.\n    * @param badge - A single badge.\n    */\n    private fillRecentArray(recentBadgesArray, badge) {\n      if (!recentBadgesArray[0]) {\n        recentBadgesArray.push([]);\n      }\n      let last = recentBadgesArray.length - 1;\n      recentBadgesArray[last].push(badge);\n    }\n\n    /**\n     *  For adding informations on the awarded badges items \n     * @param id - The id of the awarded badge.\n     * @param {!boolean} likes - True if you need 'Likes' informations on the badges too, otherwise false.\n     */\n    private findAwardedInfo(id, likes?) {\n        if (likes) {\n          for (let item of this.awardedBadges ) {\n              if ( item.badgeId === id.toString() ) {\n                return {\n                  id: item.awardedId,\n                  tap: item.alreadyLiked,\n                  date: item.awardedDate,\n                  number: item.likeNumber\n                };\n              }\n            }\n        }\n        else {\n          for (let item of this.awardedBadges ) {\n              if ( item.badgeId === id.toString() ) {\n                return {\n                  id: item.awardedId,\n                  tap: null,\n                  date: item.awardedDate,\n                  number: null\n                };\n              }\n            }\n        }\n    }\n\n    get(type, i, j) {\n      let badgesData = this.badges;\n      if (type === 'recentBadges') badgesData = this.recentBadges;\n      return badgesData[i][j];\n    }\n\n    checkDisabled(type, i, j, direction) {\n      let badgesData = this.badges;\n      if (type === 'recentBadges') badgesData = this.recentBadges;\n      let disabled = false;\n      if (direction === 'prev') {\n        if ( i === 0 && j === 0 ) disabled = true;\n      }\n      else {\n        if ( (i === badgesData.length - 1) && j === (i === badgesData[i].length - 1) )\n          disabled = true;\n        else if ( (i === badgesData.length - 1) &&  badgesData[i][j + 1] && badgesData[i][j + 1].title === null )\n          disabled = true;\n      }\n      return disabled;\n    }\n  \n    next(type, i, j) {\n      let badgesData = this.badges;\n      if (type === 'recentBadges') badgesData = this.recentBadges;\n      let row = i;\n      let col = j;\n      if (col < badgesData[row].length - 1) {\n        if ( badgesData[row][col + 1].title )\n          col++;\n      }\n      else if ( row < badgesData.length - 1 ) {\n        col = 0;\n        row++;\n      }\n      return {\n        item: badgesData[row][col],\n        i: row,\n        j: col\n      };\n    }\n  \n    prev(type, i, j) {\n      let badgesData = this.badges;\n      if (type === 'recentBadges') badgesData = this.recentBadges;\n      let row = i;\n      let col = j;\n      if (col > 0) {\n        col--;\n      }\n      else if ( row > 0 ) {\n        row--;\n        col = badgesData[row].length - 1;\n      }\n      return {\n        item: badgesData[row][col],\n        i: row,\n        j: col\n      };\n    }\n\n    updateLike(id) {\n        for ( let item of this.badges ) {\n          for ( let el of item ) {\n            if ( item.awardedId && item.awardedId === id ) {\n              item.awardedTap = true;\n              item.awardedStatus = true;\n            }\n          }\n        }\n    }\n\n    /**\n     * Methods for like, unlike and checking the like \n     * @param {!Badge} currBadge - The selected badge.\n     * @param {!boolean} companion - True if you are a Companion.\n     * @param {!string} companionProfileId - If companion you must enter your profile id for fetching your 'Likes'.\n     */\n    async like(currBadge: Badge, companion?, companionProfileId?: string) {\n      let check = await this.checkLike(currBadge, companion, companionProfileId);\n      try {\n        if (!check.alreadyLike) {\n          let data = {\n            data : {\n              type: 'likes',\n              relationships: {\n                mobile_users: {\n                    data: {\n                        type: 'mobile_users',\n                        id: companionProfileId\n                  }\n                },\n                likeable: {\n                    data: {\n                        type: 'awarded_badges',\n                        id: currBadge.awardedId // this should be the selected awarded badge\n                  }\n                }\n              }\n            }\n          };\n          let response = await clinical6.fetch(`/v3/mobile_users/${clinical6.user.id}/badges/${currBadge.awardedId}/likes`, 'POST', data);\n        }\n        else if (check.alreadyLike) {\n          let response = await clinical6.fetch(`/v3/mobile_users/${clinical6.user.id}/badges/${currBadge.awardedId}/likes/${check.likeId.toString()}`, 'DELETE');\n        }\n        let _check = await this.checkLike(currBadge, companion, companionProfileId);\n      } catch (error) {\n        console.log('Error performing Like for badge', error);\n      }\n    }\n    \n    /**\n     * Methods for like, unlike and checking the like \n     * @param {!Badge} currBadge - The selected badge.\n     * @param {!boolean} companion - True if you are a Companion.\n     * @param {!string} companionProfileId - If companion you must enter your profile id for fetching your 'Likes'.\n     */\n    async checkLike(currBadge: Badge, companion?: boolean, companionProfileId?: string) {\n      if ( currBadge.awardedId ) {\n        try {\n          let response = await clinical6.fetch(`/v3/mobile_users/${clinical6.user.id}/badges/${currBadge.awardedId}/likes`, 'GET');\n          if (response.data.length > 0) {\n            let check = new likeInfo(false, '');\n            for ( let item of response.data ) {\n              if ( companion ) {\n                if ( item.relationships.mobile_user.data.id === companionProfileId && item.relationships.likeable.data.id === currBadge.awardedId ) {\n                  check.alreadyLike = true;\n                  check.likeId = item.id;\n                  return check;\n                }\n              }\n            }\n            return check;\n          }\n          else {\n            let check = new likeInfo(false, '');\n            return check;\n          }\n        }\n        catch (error) {\n          console.log('Error checking Like', error);         \n        }\n      }\n    }\n}\n"]}