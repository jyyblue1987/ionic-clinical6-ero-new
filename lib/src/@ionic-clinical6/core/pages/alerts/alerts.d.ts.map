{"version":3,"names":[],"mappings":"","sources":["src/@ionic-clinical6/core/pages/alerts/alerts.d.ts"],"sourcesContent":["import * as moment from 'moment';\nimport { NavController, ViewController, ModalController, NavParams, LoadingController } from 'ionic-angular';\nimport { TranslatorService } from '../..';\nimport { Notification } from 'clinical6';\nimport { AlertsService } from './alerts.service';\nexport declare class AlertsPage {\n    navParams: NavParams;\n    loader: LoadingController;\n    modalCtrl: ModalController;\n    nav: NavController;\n    viewCtrl: ViewController;\n    translatorService: TranslatorService;\n    alertsSvc: AlertsService;\n    /** @param {String} pageTitle The name of the Alert Page.  */\n    pageTitle: string;\n    /** @param {Array} alertGroups An array for all the alert groups.  */\n    alertGroups: Array<AlertGroup>;\n    /** @param iconsIDs An object with all the actions and the related images.  */\n    static iconsIDs: {};\n    /** @param {String} backText The back button label.  */\n    backText: string;\n    /** @param {Boolean} alertsLoaded A boolean variable for knowing when data has been fetched.  */\n    alertsLoaded: boolean;\n    /** @param {ViewInfo} viewInfo An object with theme informations.  */\n    viewInfo: ViewInfo;\n    moment: typeof moment;\n    /** @param {Boolean} showDate True or False to show or not the alert date.  */\n    showDate: boolean;\n    constructor(navParams: NavParams, loader: LoadingController, modalCtrl: ModalController, nav: NavController, viewCtrl: ViewController, translatorService: TranslatorService, alertsSvc: AlertsService);\n    pageTitleTranslateKey(): string;\n    pageTitleTranslateFallback(): string;\n    ionViewDidLoad(): void;\n    /**\n     * Use this method when initializing the app for associating an image to a platform action.\n     * @param action Tha action name.\n     * @param path The path of the image.\n     */\n    static setAlertIcons(action: string, path: string): void;\n    /**\n     * Used for refreshing the alerts list.\n     * @param refresher\n     */\n    doRefresh(refresher: any): void;\n    /**\n     * Used for refreshing the alerts list.\n     * @param getAlerts\n     */\n    syncAlerts(getAlerts: Promise<any[]>): Promise<void>;\n    /**\n     * Populate the alertGroups array.\n     * @param alerts All the alerts.\n     */\n    groupAlerts(alerts: any): void;\n    /**\n     * To check if alerts exists.\n     */\n    hasAlerts(): boolean;\n    /**\n     * Returns the path icon.\n     * @param type The name of the action for finding the image.\n     */\n    getIconId(type: any): any;\n    /**\n     * To get the group name.\n     * @param item\n     */\n    getGroupName(item: any): string;\n    /**\n     * To get the group theme.\n     * @param item\n     */\n    getGroupTheme(item: any): string;\n    /**\n     * Used for the alert routing after the click.\n     * @param item\n     */\n    goTakeAction(item: Notification): void;\n    /**\n     * Delete the item from the list.\n     * @param item The selected notification.\n     * @param event The click event.\n     */\n    dismiss(item: Notification, event: any): void;\n    /**\n     * Set the alert as read.\n     * @param {Notification} item The selected notification.\n     */\n    private dismissAlert(item);\n    translate(translation_key: any, fallback: any): string;\n}\n/**\n * A class with theme informations.\n */\nexport declare class ViewInfo {\n    themeColor: string;\n}\n/**\n * The model for the alert items in the alert section.\n */\nexport declare class AlertGroup {\n    /** @param {String} name The name of the alert group.  */\n    name: string;\n    /** @param {Array} alerts An array for all the alerts.  */\n    alerts: Array<Notification>;\n    /** @param {String} themeColor The theme color.   */\n    themeColor: string;\n    constructor(name: string, theme: string);\n}\n"],"file":"alerts.d.ts"}