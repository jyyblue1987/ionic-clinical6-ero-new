{"version":3,"sources":["../src/@ionic-clinical6/core/pages/alerts/alerts.service.ts"],"names":[],"mappings":"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","file":"alerts.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Client, clinical6, Notification, mobileUserService } from 'clinical6';\nimport { NavController } from 'ionic-angular';\nimport { AppConfig } from '../../config';\nimport { PushService } from './push.service';\nimport { AlertsFactory } from './alert.factory';\nimport { NgZone } from '@angular/core';\nimport { shimHostAttribute } from '@angular/platform-browser/src/dom/dom_renderer';\n\n@Injectable()\nexport class AlertsService {\n\n  public alerts: Notification[];\n  animationOpt: any;\n  constructor(\n    private ngZone: NgZone\n  ) {\n    this.animationOpt = AppConfig.animationOpt;\n  }\n\n  private userId() {\n    return clinical6.user.id;\n  }\n\n  /**\n   * Retrieve all the alerts.\n   */\n  async getAlerts(): Promise<Notification[]> {\n    try {\n      let response = await mobileUserService.getNotifications();\n      this.alerts = response.filter(e => {\n        return e.attributes.status !== 'completed';\n      }).map(element => {\n        console.log(element);\n        return new Notification(element);\n      });\n      console.log(this.alerts);\n      return this.alerts;\n    } catch (error) {\n      console.log('Error in getAlerts', error);\n    }\n  }\n\n  /**\n   * Returns cached alerts instead of performing a new request.\n   */\n  cachedAlerts(): Promise<any[]>  {\n    if (this.alerts) {\n      return Promise.resolve(this.alerts);\n    }\n    return this.getAlerts();\n  }\n\n  /**\n   * Remove the selected alert.\n   * @param {Notification} message The selected Notification\n   */\n  async removeAlert(message: Notification) {\n    try {\n      message.status = 'completed';\n      await message.save();\n        return this.alerts = this.alerts.filter(curr => {\n          return (curr.id !== message['id']);\n        });\n    } catch (error) {\n      console.log('Error in removeAlert', error);\n    }\n  }\n\n  // cannot inject the nav controller into the service\n  /**\n   * Used for the alert routing. Opens the page associated to the action.\n   * @param nav Navigation Controller.\n   * @param data Callback data that comes from platform.\n   */\n  goTakeAction(nav: NavController, data) {\n    this.ngZone.run(async () => {\n\n      let _action = data.content ? data.content.action : data.action ?  data.action : null;\n      let _content = data.content ? data.content.action_object : data.action_object ? data.action_object : null;\n      var matchingItem = AlertsFactory.ActionsMap.find((item) => {\n        return item.action === _action;\n      });\n      if (matchingItem) {\n        let options = await this.callback();\n        nav.push(matchingItem.page, options, this.animationOpt);\n      }\n      else {\n        console.log(`could not handle alert with action '${_action}' and action_object '${_content}'`);\n      }\n  });\n  }\n  // override this to add several actions before redirecting the user to a new page\n  async callback() {\n    return {};\n  }\n}"]}