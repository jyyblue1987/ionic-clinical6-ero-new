{"version":3,"names":[],"mappings":"","sources":["src/@ionic-clinical6/core/pages/alerts/push.service.d.ts"],"sourcesContent":["import { Push, PushObject, NotificationEventResponse } from '@ionic-native/push';\nimport { AlertController, App } from 'ionic-angular';\nimport { Clinical6Service } from '../../clinical6.service';\nimport { TranslatorService } from '../../translator/translator.service';\nimport { AlertsService } from './alerts.service';\nexport declare class PushService {\n    alertCtrl: AlertController;\n    push: Push;\n    app: App;\n    clinical6Service: Clinical6Service;\n    translatorService: TranslatorService;\n    alertsSvc: AlertsService;\n    /** @param alerts Parameter to store the alerts  */\n    alerts: any;\n    /** @param {PushObject} pushObject Parameter to store the push notification  */\n    pushObject: PushObject;\n    /** @param animationOpt  */\n    animationOpt: any;\n    constructor(alertCtrl: AlertController, push: Push, app: App, clinical6Service: Clinical6Service, translatorService: TranslatorService, alertsSvc: AlertsService);\n    /**\n     * Returns the current user Id.\n     */\n    private userId();\n    /**\n     * Initialize the alert service and enable the push notifications.\n     * @param {String} androidSenderId Sender ID is used by Android apps to register a physical device to be able to receive notifications from particular 3rd party server.\n     * @param config\n     */\n    init(androidSenderId: any, config?: {\n        android: any;\n        ios: any;\n        windows: any;\n    }): void;\n    /**\n     * Dysplay the foreground alert.\n     * @param data Callback data that comes from platform.\n     */\n    showForegroundAlert(data: any, callback: any): void;\n    /**\n     * Controls the background data for a push.\n     * @param callback\n     */\n    showBackGroundData(callback: any): void;\n    /**\n     * Returns the ios/android callback id.\n     * @param data Callback data that comes from platform.\n     */\n    getCallbackId(data: NotificationEventResponse): number;\n    /**\n     *\n     * @param data Callback data that comes from platform.\n     */\n    getAndroidCallbackId(data: any): any;\n    /**\n     *\n     * @param data Callback data that comes from platform.\n     */\n    getIosCallbackId(data: any): any;\n    /**\n     * Shows the alert popup.\n     * @param notification Notification object with a title and a message.\n     * @param action Action sent by platform.\n     */\n    showAlert(notification: {\n        title?: string;\n        message: string;\n    }, action?: () => boolean | void): void;\n    /**\n     * Default text for the alert\n     */\n    defaultAlertText: {\n        ignore: string;\n        go: string;\n        ok: string;\n        defaultTitle: string;\n        defaultMessage: string;\n    };\n    /**\n     * Shows the text of the alert.\n     */\n    getAlertText(): {\n        ignore: string;\n        go: string;\n        ok: string;\n        defaultTitle: string;\n    };\n    /**\n     * On Error - calls when an error occurs.  This is to be overwritten.\n     *\n     * @param {any} reason - Reason for error\n     */\n    onError(reason: any): void;\n    /**\n     * Refresh the app's alerts!\n     * @param callback\n     */\n    onCallback(callback: any): Promise<{}>;\n    /**\n     * Used for managing the GO click on the alert popup.\n     * @param callback Callback data sent by platform.\n     */\n    onGo(callback: any): void;\n}\n/**\n * A model for a standard PushNotification\n */\nexport declare class PushNotification {\n    jsonData: any;\n    data: any;\n    title: 'Push Notification';\n    message: 'New Notification';\n    action: '';\n    buttons: any[];\n    constructor(data: any);\n    getTitle(): any;\n    getMessage(): any;\n    getAction(): any;\n}\n"],"file":"push.service.d.ts"}