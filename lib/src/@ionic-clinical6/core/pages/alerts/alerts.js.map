{"version":3,"sources":["../src/@ionic-clinical6/core/pages/alerts/alerts.ts"],"names":[],"mappings":"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","file":"alerts.js","sourcesContent":["import { Component } from '@angular/core';\nimport * as moment from 'moment';\nimport { NavController, ViewController, ModalController, NavParams, LoadingController } from 'ionic-angular';\nimport { TranslatorService } from '../..';\nimport { AlertModalPage } from '../../modal/alert-modal';\nimport { Notification } from 'clinical6';\nimport { AlertsService } from './alerts.service';\n\n\n\n\n\n@Component({\n    selector: 'alerts-page',\n    templateUrl: 'alerts.html'\n})\nexport class AlertsPage {\n\n    /** @param {String} pageTitle The name of the Alert Page.  */\n    pageTitle: string;\n    /** @param {Array} alertGroups An array for all the alert groups.  */\n    alertGroups: Array<AlertGroup>;\n    /** @param iconsIDs An object with all the actions and the related images.  */\n    static iconsIDs = {};\n    /** @param {String} backText The back button label.  */\n    backText: string;\n    /** @param {Boolean} alertsLoaded A boolean variable for knowing when data has been fetched.  */\n    alertsLoaded: boolean = false;\n    /** @param {ViewInfo} viewInfo An object with theme informations.  */\n    viewInfo: ViewInfo;\n    moment = moment;\n    /** @param {Boolean} showDate True or False to show or not the alert date.  */\n    showDate: boolean = false;\n    constructor(\n        public navParams: NavParams,\n        public loader: LoadingController,\n        public modalCtrl: ModalController,\n        public nav: NavController,\n        public viewCtrl: ViewController,\n        public translatorService: TranslatorService,\n        public alertsSvc: AlertsService\n    ) {\n    }\n\n    pageTitleTranslateKey(): string {\n        return 'ALERTS_TITLE';\n    }\n    pageTitleTranslateFallback(): string {\n        return 'Alerts';\n    }\n\n    ionViewDidLoad() {\n        this.backText = this.translate('BACK', 'Back');\n        this.pageTitle = this.translate(this.pageTitleTranslateKey(), this.pageTitleTranslateFallback());\n        const self = this;\n        this.viewInfo = DEMO_VIEW_INFO;\n        this.viewInfo.themeColor = '';\n        this.syncAlerts(this.alertsSvc.cachedAlerts());\n    }\n\n    /**\n     * Use this method when initializing the app for associating an image to a platform action.\n     * @param action Tha action name.\n     * @param path The path of the image.\n     */\n    static setAlertIcons(action: string, path: string) {\n        this.iconsIDs[action] = path;\n    }\n\n    /**\n     * Used for refreshing the alerts list.\n     * @param refresher \n     */\n    doRefresh(refresher) {\n        this.syncAlerts(this.alertsSvc.getAlerts())\n            .then(() => (refresher.complete()))\n            .catch(() => (refresher.complete()));\n    }\n\n    /**\n     * Used for refreshing the alerts list.\n     * @param getAlerts \n     */\n    syncAlerts(getAlerts: Promise<any[]>) {\n        // create View far all fetched Alerts\n        return getAlerts.then(alerts => {\n            this.groupAlerts(alerts);\n        }).catch(reason => {\n            this.alertsLoaded = true;\n            console.log('AlertsPage getAlertMessages Error message: ' + reason.message);\n            AlertModalPage.show(self, {\n                type: 'type_error',\n                subTitle: 'Please make sure you have a working network connection.',\n                body: 'Unable to retrieve data from server. ' + reason.messageHTML\n            });\n        });\n    }\n\n    /**\n     * Populate the alertGroups array.\n     * @param alerts All the alerts.\n     */\n    groupAlerts(alerts) {\n        this.alertGroups = [];\n        alerts.forEach((item, index) => {\n          if (item.status === 'read') {\n            return; // skip read items\n          }\n\n          const groupName = this.getGroupName(item);\n          let group = this.alertGroups.find((group) => (group.name === groupName));\n\n          if (!group) {\n              // create new group\n              const groupTheme = this.getGroupTheme(item);\n              group = new AlertGroup(groupName, groupTheme);\n              this.alertGroups.push(group);\n          }\n          group.alerts.push(item);\n\n        });\n        this.alertsLoaded = true;\n    }\n\n    /**\n     * To check if alerts exists.\n     */\n    hasAlerts() {\n        let alertCount = 0;\n        if (this.alertGroups) {\n            alertCount = this.alertGroups.reduce((a, b) => b.alerts.length, 0);\n        }\n        return (this.alertsLoaded && alertCount !== 0);\n    }\n\n    /**\n     * Returns the path icon.\n     * @param type The name of the action for finding the image.\n     */\n    getIconId(type) {\n        if (!AlertsPage.iconsIDs[type]) { // no_action\n            return 'assets/icon/Alerts_Data_Collection.svg';\n        } else {\n            return AlertsPage.iconsIDs[type];\n        }\n    }\n\n    /**\n     * To get the group name.\n     * @param item \n     */\n    getGroupName(item: any) {\n        // Only one group is available for this app so far\n        return 'Only Group';\n    }\n\n    /**\n     * To get the group theme.\n     * @param item \n     */\n    getGroupTheme(item: any) {\n        // Only one group is available for this app so far\n        return '';\n    }\n\n    /**\n     * Used for the alert routing after the click.\n     * @param item \n     */\n    goTakeAction(item: Notification) {\n      this.alertsSvc.goTakeAction(this.nav, item);\n      this.dismissAlert(item);\n    }\n\n    /**\n     * Delete the item from the list.\n     * @param item The selected notification.\n     * @param event The click event.\n     */\n    dismiss(item: Notification, event) {\n        event.stopPropagation();\n        this.dismissAlert(item);\n    }\n\n    /**\n     * Set the alert as read.\n     * @param {Notification} item The selected notification.\n     */\n    private dismissAlert(item: Notification) {\n      console.log('dismiss', item);\n      // remove item from local copy\n      this.alertGroups.forEach(group => {\n          group.alerts = group.alerts.filter(curr => {\n              return (curr['id'] !== item['id']);\n          });\n      });\n      // Remove item from Backend\n      this.alertsSvc.removeAlert(item);\n    }\n\n    translate(translation_key, fallback): string {\n        let result = this.translatorService.getInnerHTML(translation_key);\n        if (result) {\n            return result;\n        }\n        return fallback;\n    }\n}\n\n/**\n * A class with theme informations.\n */\nexport class ViewInfo {\n    themeColor: string;\n}\nvar DEMO_VIEW_INFO: ViewInfo = {\n    themeColor: '#4F2683'\n};\n\n/**\n * The model for the alert items in the alert section.\n */\nexport class AlertGroup {\n\n    /** @param {String} name The name of the alert group.  */\n    name: string;\n    /** @param {Array} alerts An array for all the alerts.  */\n    alerts: Array<Notification>;\n    /** @param {String} themeColor The theme color.   */\n    themeColor: string;\n    constructor(name: string, theme: string) {\n        this.name = name;\n        this.themeColor = theme;\n        this.alerts = new Array<Notification>();\n    }\n}"]}