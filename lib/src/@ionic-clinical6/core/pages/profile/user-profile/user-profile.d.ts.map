{"version":3,"names":[],"mappings":"","sources":["src/@ionic-clinical6/core/pages/profile/user-profile/user-profile.d.ts"],"sourcesContent":["import { NavController, NavParams, Platform } from 'ionic-angular';\nimport { User } from 'clinical6';\nimport { TransferObject } from '@ionic-native/transfer';\nimport { Camera } from '@ionic-native/camera';\nimport { ActionSheetController } from 'ionic-angular';\nimport { ProfileService } from '../profile.service';\nimport { UtilsService } from '../../../utils.service';\nexport declare class UserProfilePage {\n    utilsSvc: UtilsService;\n    profileSvc: ProfileService;\n    transferObject: TransferObject;\n    camera: Camera;\n    actionSheetCtrl: ActionSheetController;\n    navParams: NavParams;\n    nav: NavController;\n    platform: Platform;\n    /** @param  {any} profile - Parameter to store the user's profile information  */\n    profile: any;\n    /** @param  {Object} step - Parameter used to get FlowStep information  */\n    step: Object;\n    /** @param  {Array<Object>} profileData - Parameter used to save/store the input values about the Profile  */\n    profileData: any[];\n    /** @param  {boolean} editing    - Checks the form editing status */\n    editing: boolean;\n    /** @param  {boolean} formValid  - Checks if the form is valid */\n    formValid: boolean;\n    /** @param  {boolean} useOldApi  - Enables the fetch methods in order to use old v1/v2 apis */\n    useOldApi: boolean;\n    /** @param  {boolean} loading    - Forces the DOM view refresh */\n    loading: boolean;\n    /** @param  {boolean} imgLoading - Checks if the image/photo is loading */\n    imgLoading: boolean;\n    /** @param  {boolean} imgLoading - Shows a spinner if the image is loading */\n    showAvatar: boolean;\n    /** @param  {string} photo - Stores the user's photo selected from the gallery  */\n    photo: string;\n    constructor(utilsSvc: UtilsService, profileSvc: ProfileService, transferObject: TransferObject, camera: Camera, actionSheetCtrl: ActionSheetController, navParams: NavParams, nav: NavController, platform?: Platform);\n    /**\n     * @async\n     * @function getUserProfile - Maps all the profile attributes with the correct input\n    **/\n    getUserProfile(): Promise<void>;\n    /**\n     * @function mapRemoteProfileData - maps the profile form with the correct info\n     * @param {Array<any>} inputs - FlowStep inputs\n     * @param {any} profile - current profile object\n    **/\n    mapRemoteProfileData(inputs: Array<any>, profile: any): void;\n    /**\n     * @callback updateControlValue - Updates the value if an input changes\n     * @param event\n    **/\n    updateControlValue(event: any): void;\n    /**\n     * @async\n     * @function saveUserProfile - Save the User Profile info\n     * @param event\n    **/\n    saveUserProfile(): Promise<void>;\n    /**\n     * @type {User} - Returns the current user object\n    **/\n    readonly user: User;\n    /**\n     * @type {Object} - Returns the filters for input-container\n    **/\n    readonly filter: Object;\n    /**\n     * @type {string} - Returns the user's image url\n    **/\n    readonly profileImg: string;\n    /**\n     * @callback doneEditingCallback - Callback to stop the form editing\n    **/\n    doneEditingCallback(): void;\n    /**\n     * @callback enterEditMode - Callback to start the form editing\n    **/\n    enterEditMode(): void;\n    /**\n     * @callback updateFormStatus - updates the status of the form\n     * @param {Boolean} value     - the status of the form\n    **/\n    updateFormStatus(value: boolean): void;\n    /**\n     * @callback actionDoneEdit - checks the form status\n    **/\n    actionDoneEdit(): void | Promise<void>;\n    /**\n     * @callback actionDoneEdit - This is to Handle the 'Go' button on the device Keyboard for iOS\n     * @param event\n    **/\n    handleGoButton(event: KeyboardEvent): void;\n    /**\n     * @callback imgLoaded - Sets to false the imgLoading variable once the image has been loaded correctly\n    **/\n    imgLoaded(): void;\n    /**\n     * @callback imgLoaded - Callback in case the image has not been loaded correctly\n    **/\n    imgError(event: any): void;\n    /** HELPER METHODS TO MANAGE THE PHOTO UPLOAD  */\n    /**\n     * @async\n     * @function savePhoto - Add a new image to the User profile (this uses the PATCH method of the old profile api)\n     * @param event\n    **/\n    savePhoto(): Promise<void>;\n    /**\n     * @async\n     * @function takePhoto - Gets the picture from the gallery\n     * @param event\n    **/\n    takePhoto(): Promise<void>;\n    /**\n     * @async\n     * @function openGallery - Opens the Device Gallery\n     * @param event\n    **/\n    openGallery(): Promise<void>;\n    /**\n     * @function changePhoto - Shows the photo profile options if the form editng is not allowed\n    **/\n    changePhoto(): void;\n    /**\n     * @function showPhotoProfileOptions - Opens an action sheet with a title, subTitle, and an array of buttons\n    **/\n    showPhotoProfileOptions(): void;\n}\n"],"file":"user-profile.d.ts"}