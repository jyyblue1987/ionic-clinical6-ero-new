{"version":3,"sources":["../src/@ionic-clinical6/core/pages/glossary/glossary.ts"],"names":[],"mappings":"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","file":"glossary.js","sourcesContent":["import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\nimport { ViewController, ModalController } from 'ionic-angular';\nimport { LoadingController } from 'ionic-angular';\nimport { Clinical6Service } from '../../clinical6.service';\nimport { AlertModalPage } from '../../modal/alert-modal';\nimport { AppConfig } from '../../config';\nimport { TranslatorService } from '../../translator/translator.service';\nimport { DomSanitizer, SafeHtml} from '@angular/platform-browser';\n\n@Component({\n  selector: 'glossary-page',\n  templateUrl: 'glossary.html'\n})\nexport class GlossaryPage {\n    loadingCtrl: any;\n    image: string;\n    title: string;\n    glossary: Array<{title: string, position: number, details: string, expanded: boolean, detailsHeight: string}>;\n    filteredGlossary: Array<any>;\n    permLink: string;\n\n    constructor(\n        public nav: NavController,\n        public translator: TranslatorService,\n        public captiveReach: Clinical6Service,\n        public navParams: NavParams,\n        public loader: LoadingController,\n        public modalCtrl: ModalController,\n        public viewCtrl: ViewController,\n        public _sanitizer: DomSanitizer\n    ) {\n        // shows a loading control while data is being gathered\n        this.loadingCtrl = this.loader.create({content: 'Loading...'});\n        this.loadingCtrl.present();\n\n        this.title = navParams.get('menu') &&  navParams.get('menu').title || 'glossary';\n        this.glossary = [];\n        this.permLink = navParams.get('permanent_link') || 'glossary';\n\n        var thisRef = this;\n        this.captiveReach.getDynamicContent(this.permLink)\n            .then(result => {\n                thisRef.loadingCtrl.dismiss();\n                let res = result as Array<any>;\n                res.forEach( item => {\n                    let maxDisplayedChars = 40;\n                    let label = (item.title.length > maxDisplayedChars) ?\n                                 item.title.substr(0, maxDisplayedChars) + '...' :\n                                 item.title;\n                    thisRef.glossary.push({\n                        title: label,\n                        position: parseInt(item.position),\n                        details: item.description || item.rich_text,\n                        expanded: false,\n                        detailsHeight: ''\n                    });\n                });\n                thisRef.glossary.sort((a, b) => {\n                    if (a.title > b.title) { return 1; }\n                    if (a.title < b.title) { return -1; }\n                    return 0;\n                });\n                this.resetFilter();\n            }).catch(e => {\n                thisRef.loadingCtrl.dismiss()\n                    .then( () => {\n                        AlertModalPage.show(\n                                thisRef, {\n                                    type: 'type_error',\n                                    body: 'Please make sure you have a working network connection.',\n                                    subTitle: 'Unable to retrieve data from server' });\n                    });\n                console.log('get Glossary error: ', e);\n            });\n    }\n    resetFilter() {\n        this.filteredGlossary = this.glossary;\n    }\n    getItems(ev: any) {\n        this.resetFilter();\n        let searchKey = ev.target.value;\n\n        // if the value is an empty string don't filter the items\n        if (searchKey && searchKey.trim() !== '') {\n            this.filteredGlossary = this.filteredGlossary.filter((item) => {\n                return (item.title.toLowerCase().indexOf(searchKey.toLowerCase()) > -1);\n            });\n        }\n    }\n    toggleDetails(item: {title: string, position: number, details: string, expanded: boolean, detailsHeight: string}) {\n        if (item.expanded) {\n            item.expanded = false;\n        } else {\n            this.glossary.forEach((i) => { i.expanded = false; });\n            item.expanded = true;\n\n            if (item.detailsHeight === '') {\n                // Calculates the appropriate height of the item's DOM element\n                // ... by doing some DOM tricks\n                document.getElementById('item_' + item.position).style.height = 'auto';\n                var height = document.getElementById('item_' + item.position).offsetHeight + 'px';\n                document.getElementById('item_' + item.position).style.height = '0px';\n\n                // needed to allow for the renderer to complete all previous commands\n                // and render the wanted height properly\n                setTimeout(() => { item.detailsHeight = height; }, 50);\n            }\n        }\n    }\n}"]}