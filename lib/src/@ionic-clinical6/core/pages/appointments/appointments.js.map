{"version":3,"sources":["../src/@ionic-clinical6/core/pages/appointments/appointments.ts"],"names":[],"mappings":"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","file":"appointments.js","sourcesContent":["import { Component, ChangeDetectorRef } from '@angular/core';\nimport { NavController, ModalController, LoadingController, NavParams, Events } from 'ionic-angular';\nimport * as moment from 'moment';\nimport { AppointmentsService } from './appointments.service';\nimport { EditAppointmentPage } from './edit/edit-appointment';\nimport { AppConfig } from '../../config';\nimport { TranslatorService } from '../../translator/translator.service';\nimport { AlertModalPage } from '../../modal/alert-modal'\n\n\n@Component({\n    selector: 'appointments-page',\n    templateUrl: 'appointments.html'\n})\nexport class AppointmentsPage {\n\n    moment = moment;\n    demoMode = true;\n\n    currentDate: string;\n    todayDate: string;\n    selectedDate;\n    dateView: boolean = true;\n    mode: string;\n    monthAppointments = [];\n    todayAppointments = [];\n    todayAppointmentsDemo = [];\n    monthAppointmentsDemo = [];\n    records = [];\n    isUpdating: boolean = false;\n    tutorialData;\n    tutorialVideoUrl = 'https://www.youtube.com/embed/OU-cIoqKw-0?rel=0&controls=1&showinfo=0&autoplay=1&start=2';\n    items = [];\n    cycles = [];\n    ready: boolean;\n    tutorialDay;\n    tutorialMonth;\n    tutorialYear;\n\n\n    constructor(\n        public event: Events,\n        public nav: NavController,\n        public reminders: AppointmentsService,\n        public translatorService: TranslatorService,\n        public appConfig: AppConfig,\n        public modalCtrl: ModalController,\n        ) {\n                this.monthAppointments = [];\n                this.todayAppointments = [];\n    }\n\n    ngOnInit() {\n        this.appConfig.calendarMode = 'date';\n        this.appConfig.calendarReady = false;\n    }\n\n    async ionViewWillEnter() {\n        await this.reminders.getReminderRules();\n        this.tutorialDay = moment().date();\n        this.tutorialMonth = moment().month();\n        this.tutorialYear = moment().year();\n        if (this.appConfig.calendarMode) {\n            if ( this.appConfig.calendarMode === 'month') {\n                this.mode = this.appConfig.calendarMode;\n                this.ready = this.appConfig.calendarReady;\n            }\n            else this.mode = this.appConfig.calendarMode;\n        }\n        if (this.selectedDate) {\n            this.updateToday();\n            return;\n        }\n        this.event.subscribe('selected-date', (date) => {\n            this.selectedDate = date;\n            this.currentDate = moment(this.selectedDate).format('dddd, DD MMM YYYY');\n        });\n        this.fetchAppointmentList();\n        this.ready = true;\n        this.todayDate = moment().format('dddd, DD MMM YYYY');\n    }\n\n    ionViewDidLoad() {\n        // provajred\n        this.records = [];\n        const self = this;\n        this.currentDate = moment(this.selectedDate).format('dddd, DD MMM YYYY');\n    }\n\n    ionViewDidLoadOld() {\n        this.currentDate = moment(this.selectedDate).format('dddd, DD MMM YYYY');\n\n        // Mock record list\n        // this.records = RECORDS;\n    }\n\n    /**\n     * Switch the calendar to month view.\n     */\n    switchToMonth() {\n        this.currentDate = moment(this.selectedDate).format('dddd, DD MMM YYYY');\n        if (this.mode === 'month') {\n            this.ready = true;\n            return;\n        }\n        this.mode = 'month';\n        if (this.selectedDate) this.selectedDate = null;\n        this.ready = true;\n        // this.dateView = false;\n    }\n\n    /**\n     * Switch the calendar to date view.\n     * @param opt Optional boolean parameter for enabling the refresh of the appointments list.\n     */\n    switchToDate(opt?: boolean) {\n        this.currentDate = moment(this.selectedDate).format('dddd, DD MMM YYYY');\n        if (this.mode === 'date') return;\n        this.mode = 'date';\n\n        if (opt) {\n            //  this.todayAppointments = [];\n            //  this.monthAppointments = [];\n             this.fetchAppointmentList();\n        }\n        // this.dateView = true;\n    }\n\n    goBack() {\n        this.selectedDate = null;\n        this.nav.pop();\n    }\n\n    /**\n     * Updates the list of today's appointments.\n     */\n    updateToday() {\n        this.todayAppointments = [];\n        this.reminders.getAppointmentsByDate(moment(this.selectedDate).format('YYYY-MM-DD'))\n        .then( dateAppointments => {\n            this.todayAppointments = [];\n            for (let dateAppointment of dateAppointments)\n                this.todayAppointments.push(dateAppointment);\n            this.isUpdating = false;\n            this.ready = true;\n        })\n        .catch( reason => {\n            console.log(reason);\n            this.isUpdating = false;\n        });\n    }\n\n    /**\n     * Retrieves all the appointments from the platform updating the local data structures.\n     */\n    fetchAppointmentList() {\n        this.monthAppointments = [];\n        this.todayAppointments = [];\n        if (this.isUpdating) return;\n        this.isUpdating = true;\n\n        this.reminders.getAppointments()\n        .then( monthAppointments => {\n            this.monthAppointments = monthAppointments;\n            this.isUpdating = false;\n            this.ready = true;\n        })\n        .catch( reason => {\n            console.log(reason);\n            this.isUpdating = false;\n        });\n\n        this.reminders.getAppointmentsByDate(moment().format('YYYY-MM-DD'))\n        .then( dateAppointments => {\n            this.todayAppointments = [];\n            for (let dateAppointment of dateAppointments)\n                this.todayAppointments.push(dateAppointment);\n            this.isUpdating = false;\n        })\n        .catch( reason => {\n            console.log(reason);\n            this.isUpdating = false;\n        });\n    }\n\n    /**\n     * Fills the local data structure with the today's appointments.\n     * @param event Calendar event.\n     * @param day Selected date.\n     */\n    addDayAppointments(event: any, day?: string) {\n        let current;\n        if (day) current = moment(day).format('DD/MM/YYYY');\n        else current = moment().format('DD/MM/YYYY');\n        if (moment(event.start).format('DD/MM/YYYY') === current)\n        //   this.setToDisplayAndPush(event);\n            this.todayAppointments.push(event);\n    }\n\n    /**\n     * Redirect to the Edit Appointent Page.\n     */\n    newReminder() {\n        this.nav.push(EditAppointmentPage, {mode: true});\n    }\n\n    /**\n     * Updates the Day Appointments before switching to Date View.\n     * @param data Calendar events.\n     */\n    showAllEvents(data) {\n        // switch to date view\n        // to show event list of different day\n        // if (data['events'].length <= 0 || this.isUpdating) return;\n        if (data['events'].length <= 0) return;\n\n        // this.isUpdating = true;\n        this.todayAppointments = [];\n        this.selectedDate = data['day']['date'];\n        data['events'].forEach(event => {\n            this.addDayAppointments(event, data['day']['date']);\n        });\n        // this.isUpdating = false;\n        this.switchToDate();\n    }\n\n    showReminder(reminder: any) {\n       this.appConfig.calendarMode = 'month';\n       this.nav.push(EditAppointmentPage, {mode: false, data: reminder});\n    }\n\n    translate(string_key) {\n        let s = this.translatorService.getInnerHTML(string_key);\n        return s || string_key;\n    }\n\n    translateWithTags(string_key) {\n        let s = this.translatorService.get(string_key);\n        return s || string_key;\n    }\n\n\n    showError(title = 'Error', errorSubTitle, errorText) {\n        AlertModalPage.show(this, { type: 'type_error', title: title, body: errorText, subTitle: errorSubTitle, cancelCallback: () => { } });\n    }\n\n}\n\nconst EVENTS = [\n {\n  'start': {day: 28, month: 4, year: 2017},\n  'time': {hour: 10, minute: 0},\n  'title': 'Appointment w/ Dr. Tom',\n  'site': 'Clinic 1'\n },\n {\n  'start': {day: 5, month: 4, year: 2017},\n  'time': {hour: 22, minute: 0},\n  'title': 'Appointment w/ Dr. Anderson',\n  'site': 'Clinic 2'\n },\n {\n  'start': {day: 12, month: 4, year: 2017},\n  'time': {hour: 4, minute: 0},\n  'title': 'Appointment w/ Dr. Smith',\n  'site': 'Clinic 3'\n }\n];\n\nconst RECORDS = [\n    {\n        'date': '2017-05-10T21:59:59.999Z',\n        'use': true\n    },\n    {\n        'date': '2017-05-30T21:59:59.999Z',\n        'use': false\n    }\n];"]}