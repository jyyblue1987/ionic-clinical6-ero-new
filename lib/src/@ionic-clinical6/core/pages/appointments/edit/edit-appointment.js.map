{"version":3,"sources":["../src/@ionic-clinical6/core/pages/appointments/edit/edit-appointment.ts"],"names":[],"mappings":"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","file":"edit-appointment.js","sourcesContent":["import { Component } from '@angular/core';\nimport { NavController, NavParams, Events } from 'ionic-angular';\nimport { Keyboard } from '@ionic-native/keyboard';\nimport * as moment from 'moment';\nimport { AppointmentsService } from '../appointments.service';\nimport { TranslatorService } from '../../../translator/translator.service';\nimport { AppConfig } from '../../../config';\n\n\n@Component({\n    selector: 'edit-appointment-page',\n    templateUrl: 'edit-appointment.html'\n})\nexport class EditAppointmentPage {\n\n    moment = moment;\n\n    newReminder = {title: null, start: null, time: null, site: null, id: null};\n    reminder = {};\n    editMode: boolean;\n    isUpdating = false;\n    monthShortNames;\n\n    content = {};\n\n    constructor(\n        public event: Events,\n        public nav: NavController,\n        public navParam: NavParams,\n        public keyboard: Keyboard,\n        public appConfig: AppConfig,\n        public reminders: AppointmentsService,\n        public translatorService: TranslatorService) {\n\n        this.editMode = this.navParam.get('mode') ? this.navParam.get('mode') : false;\n        this.reminder = this.navParam.get('data') || {};\n        this.monthShortNames = moment.monthsShort();\n\n    }\n\n    ionViewDidLoad() {\n        let nowISO = moment().format();\n        this.newReminder = {\n            title: null,\n            start: nowISO,\n            // time: nowISO,\n            // start: null,\n            time:  moment().format('HH:mm'),\n            site: null,\n            id: null\n        };\n        this.initializeContent();\n    }\n\n    /**\n     * Change the labels according to the type of the page: Edit page or New appointment page(Edit Mode or Save mode).\n     */\n    initializeContent() {\n        if (this.editMode) {\n           this.content['title'] = 'Set reminder Title';\n           this.content['subtitle']  = 'Set Reminder Subtitle';\n           this.content['button'] = 'SAVE';\n\n        }\n        else {\n           this.content['title'] = 'Ucoming Text';\n           this.content['subtitle']  = null;\n           this.content['button'] = 'Edit';\n        }\n    }\n\n    handleKeys(event: KeyboardEvent) {\n        if (event.keyCode === 13) this.keyboard.close();\n    }\n\n    goBack() {\n        // this.appConfig.calendarMode = 'date';\n        this.nav.pop();\n    }\n\n    /**\n     * Save the new appointment.\n     */\n    async save() {\n        if (this.isUpdating) return;\n\n        this.editMode = true;\n        this.initializeContent();\n        // let reminder = Object.assign(this.newReminder, {});\n        // reminder.time = moment(reminder.time, 'h:mm A').format('HH:mm');\n        this.isUpdating = true;\n\n        await this.reminders.saveAppointment(this.newReminder)\n            .catch ( reason => {\n                alert(reason);\n            });\n        this.event.publish('selected-date', this.newReminder.start);\n        this.goBack();\n        this.isUpdating = false;\n        // this.reminders.save(this.newReminder)\n        // .then(response => {\n        //     alert('ok');\n        //     this.goBack();\n        //     this.isUpdating = false;\n        // })\n        //     .catch ( reason => {\n        //         alert(reason);\n        //         this.isUpdating = false;\n        //     });\n    }\n\n    /**\n     * Prepare the edit mode.\n     */\n    edit() {\n        // To adjust when events are provided\n        this.newReminder.title = this.reminder['title'];\n        this.newReminder.start = moment(this.reminder['start']).format('YYYY-MM-DD'); // .toISOString(); does not work\n        this.newReminder.time = moment(this.reminder['time']).format('HH:mm'); // .toISOString(); does not work\n        // this.newReminder.start = this.reminder['start'];\n        // this.newReminder.time = this.reminder['time'];\n        this.newReminder.site = this.reminder['site'];\n        this.newReminder.id = this.reminder['id'];\n\n        this.editMode = true;\n        this.initializeContent();\n    }\n\n    /**\n     * Switch between Edit Mode and Save Mode.\n     */\n    takeAction() {\n        if (this.editMode)\n            this.save();\n        else\n            this.edit();\n    }\n\n    translate(string_key) {\n        let s = this.translatorService.getInnerHTML(string_key);\n        return s;\n    }\n}"]}