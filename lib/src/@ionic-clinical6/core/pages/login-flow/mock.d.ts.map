{"version":3,"names":[],"mappings":"","sources":["src/@ionic-clinical6/core/pages/login-flow/mock.d.ts"],"sourcesContent":["import { Flow, FlowStep } from 'clinical6';\n/**\n * The Login Flow extends the Flow Model, adds new helper attributes and resets the default values by avoiding to send any transition\n * and allowing to use mock flows. For making the code more user-friedly and flexible we tried to keep as much as possible the same String values for\n * following properties: id, callback, input.id\n *\n * @extends {FlowModel}\n * Flow Step properties\n * @property {FlowStep} first                           - The first step if the first_step id exists\n * @property {String|Number} first_step                 - The id corresponding to the first step in the flow.\n * @property {String|Number} id                         - The flow id (inherited)\n * @property {String} name                              - The name of the flow  (inherited)\n * @property {Number} total                             - The total number of steps in the flow (inherited)\n * @property {String} separator                         - Adds a 'line' or a 'space' separator between divs. It is valid also for an input to divide\n *                                                        the body(text) from the instructions(text)\n * @property {Object} toolbar                           - Used to set different toolbar layouts\n * @property {String} toolbar.title                     - Uses the toolbar 'title' layout: Center Text Title + Back Arrow  + Back Label\n * @property {boolean} toolbar.logo                     - Uses the toolbar 'logo' layout: Company Logo centered + back arrow + back Label\n * @property {Object} alerts                            - Object that maps different popup error or warning to show on the App, using the Alert key\n *                                                        and the title, message and buttons properties to customize the Alert (also works with Translator Service).\n *                                                        Depending of the Alert to show the following default keys must be used:\n *                                                          1. account disabled -> \"disabled\" key\n *                                                          2. invalid code/email/pin -> \"invalid\" key\n *                                                          3. pins code mismatch -> \"pins_mismatch\" key\n *                                                          4. app/device registration error -> \"registration\" key\n *                                                          5. alert for pin reset -> \"reset_pin\" key\n * @property {String} input.id                          - The id corresponding to the input. Depending of the page to show the following default values must be used:\n *                                                          1. \"check-email\" screen -> \"email\" id for email form\n *                                                          2. \"check-code\" screen -> \"code\" id for verification-code form\n *                                                          3. \"check-pin\" screen -> \"email_sent\" id for pin/password form\n *                                                          4. \"forgot-pin\" screen -> \"email_sent\" id for email form (forgot pin case)\n *                                                          5. \"reset-pin\" screen -> \"activation_code\" id for activation-code form (forgot pin case)\n *                                                          6. \"reset-pin\" screen -> \"reset_pin\" id for pin form (forgot pin case)\n *                                                          7. \"reset-pin\" screen -> \"confirm_reset_pin\" id for confirm-pin form (forgot pin case)\n *                                                          8. \"create-pin\" screen -> \"new_pin\" id for pin form (create pin case)\n *                                                          9. \"create-pin\" screen -> \"confirm_new_pin\" id for confirm-pin form (create pin case)\n * @property {String} input.question_type               - The question_type corresponding to the input. Depending of the form to show the following default values must be used:\n *                                                          1. email form -> \"email\" question_type-\n *                                                          2. pin/password form -> \"pin\" question_type\n *                                                          3. code form -> \"code\" question_type\n * @property {String} input.style                       - The style corresponding to the input. Depending of the form to show the following default values must be used:\n *                                                          1. email form -> \"email\" style\n *                                                          1. pin/code form -> \"password\" style\n * @property {Object} input.validation_details          - Any further validation information\n * @property {Number} input.validation_details.min      - Number of minimum values to use. Default to 6 for a pin/password input and\n *                                                        8 for a verification/activation-code input\n * @property {Number} input.validation_details.max      - Number of maximum values to use. Default to 6 for a pin/password input and\n *                                                        8 for a verification/activation-code input\n * @property {Object} input.attribute                   - Custom attributes for UI improvements\n * @property {String} input.attribute.separator         - Adds a 'line' or a 'space' separator between divs (for input form)\n * @property {String} input.attribute.link_button       - Used to add a link button under the input form. It must be equal to the button_name property\n *\n * Flow Step - Button properties\n * @property {boolean} capture                          - It must be false to avoid transition errors\n * @property {String} callback                          - Callback to use if the button is clicked. A custom callback can be implemented extending the LoginFlowPage and\n *                                                        using any string other than the following:\n *                                                          1. \"checkEmail\" -> Callback to check registration status of the user\n *                                                          2. \"checkCode\" -> Callback to check the verification code and call the 'checkCodeSuccess' callback in case of success\n *                                                          3. \"checkPin\" -> Callback to start the login procedure and call the 'loginSuccess' callback in case of success\n *                                                          4. \"forgotPin\" -> Callback to start the pin/password reset procedure\n *                                                          5. \"resetPin\" -> Callback to reset the pin/password and call the 'loginSuccess' callback in case of success\n *                                                          6. \"createPin\" -> Callback to create a new Pin and call the 'createPinSuccess' callback in case of success\n * @property {boolean} input.attribute.is_link_button   - Necessary to understand that the button is a link and not a footer button or a special button\n *\n * @example <caption>Login Flow Step example</caption>\n * {\n *   'id': 'check-pin',\n *   'title': 'Enter your 6 digit PIN',\n *   'description': null,\n *   'rich_description': null,\n *   'separator': null,\n *   'content_type': 'check_pin',\n *   'image': null,\n *   'toolbar': {\n *     'logo': null,\n *     'title': 'Log In'\n *   },\n *   'alerts': {\n *     'reset_pin': {\n *         'title': 'Reset Password',\n *         'message': 'Would you like to reset <br>your 6 digit Password?',\n *         'buttons': [\n *           {\n *             'text': 'Cancel',\n *             'handler': false\n *           },\n *           {\n *             'text': 'OK',\n *             'handler': true\n *           }\n *         ]\n *     },\n *     'invalid': {\n *         'title': 'Invalid PIN',\n *         'message': 'Please check your credentials and try again',\n *         'buttons': null\n *     },\n *     'registration': {\n *         'title': 'Application error',\n *         'message': 'Something went wrong, please reinstall your app.',\n *         'buttons': null\n *     }\n *   },\n *   'inputs': [\n *       {\n *         'id': 'pin',\n *         'storage_attribute': 'pin',\n *         'title': 'Enter your 6 digit PIN',\n *         'body': null,\n *         'question_type': 'pin',\n *         'style': 'password',\n *         'required': true,\n *         'validation_details': { min: 6, max: 6},\n *         'instructions': null,\n *         'choice_list': [],\n *         'locked': null,\n *         'attribute' : {\n *           'link_button': 'Forgot Pin',\n *           'separator': 'space'\n *         }\n *       }\n *     ],\n *     'paths': [\n *         {\n *           'button_name': 'Forgot Pin',\n *           'callback': null,\n *           'capture': false,\n *           'last': true,\n *           'is_link_button': true,\n *           'steps': [\n *               {\n *                   'step': 'forgot-pin',\n *                   'conditions': []\n *               }\n *           ]\n *         },\n *         {\n *           'button_name': 'LOG IN',\n *           'callback': 'checkPin',\n *           'capture': false,\n *           'last': false,\n *           'steps': [\n *             {\n *               'step': 'forgot-pin',\n *               'conditions': [\n *                   {criteria: \"failed_logins\", operator: \">=\", value: \"3\", source: \"profile\"}\n *               ]\n *             },\n *             {\n *               'step': null,\n *               'conditions': [\n *                   {criteria: \"failed_logins\", operator: \"<\", value: \"3\", source: \"profile\"}\n *               ]\n *             }\n *           ]\n *         }\n *     ]\n * }\n **/\ndeclare class LoginFlow extends Flow {\n    constructor(response?: {});\n    /**\n     * This allows to use the Login Flow as a mock flow, disabling any transition\n     */\n    disableTransitions(): void;\n    /**\n     * @param {String} id    - Flow Step id\n     * @return {FlowStep}    - Retrieves the Flow Step with a specific \"id\" by filtering the Flow Steps list of the Login Flow\n     *\n     * @example\n     * let flow = new LoginFlow({...});\n     * let step = flow.getStepbyId('create-pin');\n    **/\n    getStepbyId(id: any): FlowStep;\n    /**\n     * Sets the Flow Step with a specific \"id\" as first Flow Step of the Login Flow\n     * @param {String} id    - Flow Step id\n     *\n     * @example\n     * let flow = new LoginFlow({...});\n     * let step = flow.setFirstStep('create-pin');\n    **/\n    setFirstStep(id: any): void;\n}\n/**\n * @type {LoginFlow} loginFlow -The following loginFlow can be imported  in any Project to build the Login Section\n *\n * NOTE: the default properties flow_process_id, input.validation_expression, input.max, input.max_label, input.min, input.min_label,\n *       input.labels[], input.interval, etc. are unnecessary so will be omitted.\n**/\ndeclare const loginFlow: LoginFlow;\nexport { loginFlow, LoginFlow };\n"],"file":"mock.d.ts"}