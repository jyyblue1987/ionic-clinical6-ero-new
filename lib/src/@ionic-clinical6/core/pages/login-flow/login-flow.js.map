{"version":3,"sources":["../src/@ionic-clinical6/core/pages/login-flow/login-flow.ts"],"names":[],"mappings":"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","file":"login-flow.js","sourcesContent":["import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { Modal, NavController, NavParams, ModalController, AlertController, Platform, LoadingController } from 'ionic-angular';\nimport { clinical6, Device, User, mobileUserService, Client } from 'clinical6';\nimport { InputStyleUtil } from '../../flow_process/flow_inputs/input.model';\nimport { Flows} from '../../flow_process/flow-factory';\nimport { FlowStepPage } from '../../flow_process/flow_steps/flowstep';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { FlowService } from '../../flow_process/flow.service';\nimport { TranslatorService } from '../../translator/translator.service';\nimport { AppLoginService } from '../../login.service';\nimport { StepInputFactory } from '../../flow_process/flow_inputs/stepinput.factory';\nimport { CustomStepInputLoginComponent } from './custom-login-input/stepinput-login';\nimport { UtilsService } from '../../utils.service';\n\n@Component({\n  selector: 'login-flow-page',\n  templateUrl: 'login-flow.html'\n})\nexport class LoginFlowPage extends FlowStepPage {\n    /** @type {boolean} showBackButton - shows the back button on the toolbar if it is true **/\n    showBackButton: boolean;\n    /** @type {any} loader - shows a spinner **/\n    loader: any;\n    /** @type {any} alert - variable to handle the Alert Controller **/\n    alert: any\n    constructor(\n      public utilsSvc: UtilsService,\n      public loginSvc: AppLoginService,\n      public translator: TranslatorService,\n      public navParams: NavParams,\n      public nav: NavController,\n      public flowCtlr: FlowService,\n      public modalCtrl: ModalController,\n      public sanitizer: DomSanitizer,\n      public platform: Platform,\n      public elementRef: ElementRef,\n      public alertCtrl: AlertController) {\n        super(utilsSvc, navParams, nav, flowCtlr, modalCtrl, sanitizer, platform, elementRef, alertCtrl);\n        this.showBackButton = this.navParams.get('showBackButton') == false ? false: true;\n        if (this.step.id === 'check-pin') {\n          this.step.flow.set('failed_logins', 0);\n        }\n        // this extends the input container dynamically \n        StepInputFactory.setMap( {\n          code:  CustomStepInputLoginComponent,\n          pin: CustomStepInputLoginComponent,\n          email: CustomStepInputLoginComponent\n        });\n    }\n\n  async ionViewWillEnter() {\n    if (this.step.id === this.step.flow.first.id) {\n      this.flowCtlr.resetStack(this.step);\n    }\n  }\n\n  /** \n   * @function goNext - Executes the callback function for the active path of the Flow Step and goes to the next Flow Step if it exists\n   * \n   * @param {String} input_id\n  **/\n  async goNext(button, options: any = {}) {\n    try {\n      this.utilsSvc.presentLoading();\n      /** @type {any} last - check if the active Flow Step is the last  **/\n      let last;\n      if (button.callback)\n         last = await this[`${button.callback}`]();\n        const response = await super.gotoFlow(button.button_name, options); // ignoreRequiredFields\n      this.isNavigating = false;\n      return response;\n    } catch(err) {\n      this.utilsSvc.dismissLoader();\n      this.isNavigating = false;\n      console.error(err);\n    }\n  }\n\n  /** \n   * helper method to retrieve the input value\n   * \n   * @param {String} input_id\n  **/\n  inputValue(input_id: string) {\n    return this.inputvalues[input_id] ? this.inputvalues[input_id] : '';\n  }\n\n  /**\n   * @param {any} event - button object passed from nested component in case of 'goToPage' event\n   * \n   * @example <caption> Example of link button </caption>\n   * {\n   *    // Flow Step attributes,\n   *    'inputs': [\n   *      {\n   *        'id': 'pin',\n   *        'storage_attribute': 'pin',\n   *        // ...\n   *        'attribute' : {\n   *          'link_button': 'Forgot Pin', // it must be equal to the \"button_name\" attribute of the path\n   *        }                  \n   *      }\n   *    ],\n   *    'paths': [\n   *       {\n   *          'button_name': 'Forgot Pin', // it must be equal to the \"attribute.link_button\" attribute of the input\n   *          'callback': null,\n   *          'capture': false,\n   *          'last': true,\n   *          'is_link_button': true // it must be true\n   *          'steps': [\n   *             {\n   *                'step': 'forgot-pin',\n   *                'conditions': []\n   *             }\n   *          ]\n   *       }\n   *   ]\n   * }\n  **/\n  goToPage(event: any) {\n    if (event && event.value) {\n      let button = event.value;\n      this.goNext(button);\n    }\n  }\n  \n  /**\n   * @callback checkEmail       - Callback to check registration status of the user\n   * \n   * @return {Promise<boolean>} - Promise that returns false in case of success\n   * @throws {Error}            - If missing/invalid required parameters\n   *\n   * @example <caption> Flow Step - 'checkEmail' callback example </caption>  \n   * {\n   *   // ...Flow Step attributes,\n   *  'paths': [\n   *      {\n   *        'button_name': 'NEXT',\n   *        'callback': 'checkEmail',\n   *        'capture': false,\n   *        'last': false,\n   *        'is_link_button': false,\n   *        'steps': []\n   *     }\n   *   ]\n   * }\n  **/\n  async checkEmail(): Promise<boolean> {\n\n      /** @type {String} email - get the 'email' input for the active Flow Step  **/\n      const email = this.inputValue('email');\n\n      let attributes = {};\n      if (email.indexOf('@') > -1) {\n        attributes['email'] = email;\n      }\n      else {\n        attributes['account_name'] = email;\n      }\n      try {\n        // this methods requires a token or throws an error\n        if (!clinical6.authToken)\n          clinical6.authToken = 'dummy';\n        const value = await mobileUserService.getRegistrationStatus(attributes);\n        if (value === 'invalid' || value === 'disabled') {\n          await this.throwError(value);\n        }\n        if (value === 'active' || value === 'new') {\n          // this enables the condition to load the check-pin FlowStep\n          if (value === 'active')\n            this.step.flow.set(this.step.id, 'pin');\n          // this enables the condition to load the check-pin FlowStep\n          if (value === 'new')\n            this.step.flow.set(this.step.id, 'code');\n          // resetting the device data - TODO, maybe not necessary\n          this.loginSvc.resetDeviceInfo();\n          // authenticating the device\n          try {\n            const _response = await this.loginSvc.authenticateDevice();\n            console.log('Device Authentication Success ', _response);\n            clinical6.user = new User(attributes);\n            // localStorage.setItem('user', JSON.stringify(clinical6.user));\n            return false;\n          }\n          catch (err) {\n            console.error('Error Authenticating ', err);\n            await this.throwError('registration');\n          }\n        }\n      }\n      catch (e) {\n        console.error('getRegistrationStatus: failure', e);\n        throw (e);\n      }\n  }\n\n  /**\n   * @callback checkCode        - Callback to check the verification code and call the 'checkCodeSuccess' callback in case of success\n   * \n   * @return {Promise<boolean>} - Promise that returns true if the verification code is valid\n   * @throws {Error}            - If missing/invalid required parameters\n   *\n   * @example <caption> Flow Step - 'checkCode' callback example </caption>  \n   * {\n   *   // ...Flow Step attributes,\n   *  'paths': [\n   *      {\n   *        'button_name': 'UNLOCK APP',\n   *        'callback': 'checkCode',\n   *        'capture': false,\n   *        'last': true,\n   *        'link_button': false,\n   *        'steps': []\n   *     }\n   *   ]\n   * }\n  **/\n  async checkCode(): Promise<boolean> {\n\n      /** @type {String} code  - get the 'code' input for the active Flow Step  */\n      const code: string = this.inputValue('code');\n\n      let alert;\n      try {\n        let newUser = await mobileUserService.acceptInvitation(code, { email: clinical6.user.email, device: clinical6.device });\n        clinical6.user = newUser;\n        localStorage.setItem('currentUser', JSON.stringify(clinical6.user.toJSON()));\n        localStorage.setItem('confirmedUserID', clinical6.user.id.toString());\n        this.loginSvc.currToken = code;\n        this.checkCodeSuccess();\n        return true;\n      }\n      catch (err) {\n        console.error('Unable to Accept invitation', err);\n        if (err.message.indexOf('already confirmed') > -1) {\n          // email  already confirmed, call the checkCodeSuccess callback\n          this.checkCodeSuccess();\n          return true;\n        }\n        await this.throwError('invalid');\n      }\n  }\n\n  /**\n   * @callback checkPin         - Callback to start the login procedure and call the 'loginSuccess' callback in case of success\n   * \n   * @return {Promise<boolean>} - Promise that returns true if the New Pin has been reset succesfully\n   * @throws {Error}            - If missing/invalid required parameters\n   *\n   * @example <caption> Flow Step - 'checkPin' callback example </caption>  \n   * {\n   *   // ...Flow Step attributes,\n   *  'paths': [\n   *      {\n   *        'button_name': 'SEND',\n   *        'callback': 'checkPin',\n   *        'capture': false,\n   *        'last': true,\n   *        'is_link_button': null,\n   *        'steps': []\n   *     }\n   *   ]\n   * }\n  **/\n  async checkPin() {\n    \n      /** @type {String} code - get the 'pin' input for the active Flow Step  **/\n      const pin = this.inputValue('pin');\n      /** @type {String} failed_logins - count the failed logins  **/\n      let failed_logins = this.step.flow.get('failed_logins') || 0;\n      let err = this.step.alerts && this.step.alerts['reset_pin'];\n      if (!err) {\n        err = {\n          title: 'Reset Password',\n          message: 'Would you like to reset <br>your 6 digit Password?',\n          buttons: [\n            {\n              'text': 'Cancel',\n              'handler': true\n            },\n            {\n              'text': this.translator.getInnerHTML('POPUP_OK') || 'OK',\n              'handler': false\n            }\n          ]\n        }\n      }\n      if (failed_logins >=3) {\n        const data = await this.showPopup(err.title, err.message, err.buttons);\n        if (!data)\n          throw('Alert Dismiss');\n        else\n          return data;\n      }\n      try {\n        // set the device in case the device has not been already set  and if that is present in the localstorage\n        if (localStorage.getItem('device'))\n          clinical6.device = new Device(JSON.parse(localStorage.getItem('device')));\n        else {\n          // resetting the device data - TODO, maybe not necessary\n          this.loginSvc.resetDeviceInfo();\n          // authenticating the device\n          const _response = await this.loginSvc.authenticateDevice();\n        }  \n      } catch (e) {\n        throw(e);\n      }\n\n      try {\n        if ( !clinical6.user.email && !clinical6.user.accountName && localStorage.getItem('user') ) {\n          clinical6.user = new User(JSON.parse(localStorage.getItem('user')));\n        }\n        let result = await this.loginSvc.authenticateUser(clinical6.user.email || clinical6.user.accountName, pin);\n        console.log('User Login Success', result);\n        localStorage.setItem('user', JSON.stringify(clinical6.user));\n        await this.loginSuccess();\n        return true;\n      } catch (failure) {\n\n        failed_logins++; \n        this.step.flow.set('failed_logins', failed_logins);\n        console.log('Sign in error: ' + failure);\n        if (failed_logins < 3) {\n          await this.throwError('invalid');\n        } else {\n          const data = await this.showPopup(err.title, err.message, err.buttons);\n          if (!data)\n            throw(failure);\n          else\n            return data;\n        }\n      }\n  }\n\n  /**\n   * @callback forgotPin        - Callback to start the pin/password reset procedure\n   * \n   * @return {Promise<boolean>} - Promise that returns false if the activation-code has been sent succesfully to the email provided\n   * @throws {Error}            - If missing/invalid required parameters\n   *\n   * @example <caption> Flow Step - 'forgotPin' Callback example </caption>  \n   * {\n   *   // ...Flow Step attributes,\n   *  'paths': [\n   *      {\n   *        'button_name': 'SEND',\n   *        'callback': 'forgotPin',\n   *        'capture': false,\n   *        'last': false,\n   *        'is_link_button': false,\n   *        'steps': []\n   *     }\n   *   ]\n   * }\n  **/\n  async forgotPin(): Promise<boolean> {\n\n      /** @type {String} email - get the 'email_sent' input for the active Flow Step  **/\n      const email = this.inputValue('email_sent');\n\n      try {\n        let response = await mobileUserService.requestPasswordReset({ email: email });\n        console.log('Valid Email: ', response);\n        return false;\n      }\n      catch (reason) {\n        console.log('Invalid Email error: ' + reason.message);\n        await this.throwError('invalid');\n      }\n  }\n\n  /**\n   * @callback resetPin         - Callback to reset the pin/password and call the 'loginSuccess' callback in case of success\n   * \n   * @return {Promise<boolean>} - Promise that returns true if the New Pin has been reset succesfully\n   * @throws {Error}            - If the pins mismatch or missing/invalid required parameters\n   *\n   * @example <caption> Flow Step - 'resetPin' Callback example </caption>  \n   * {\n   *   // ...Flow Step attributes,\n   *  'paths': [\n   *      {\n   *        'button_name': 'UNLOCK APP',\n   *        'callback': 'resetPin',\n   *        'capture': false,\n   *        'last': true,\n   *        'is_link_button': false,\n   *        'steps': []\n   *     }\n   *   ]\n   * }\n  **/\n  async resetPin():  Promise<boolean> {\n\n      /**  \n       * @type {String} code           - get the 'activation_code' input for the active Flow Step \n       * @type {String} newPin         - get the 'reset_pin' input for the active Flow Step\n       * @type {String} newPinConfirm  - get the 'confirm_reset_pin' input for the active Flow Step\n      **/    \n      const code: string = this.inputValue('activation_code');\n      const newPin: string = this.inputValue('reset_pin');\n      const newPinConfirm: string = this.inputValue('confirm_reset_pin');\n\n      let alerts = this.step.alerts || {};\n      // do pins match?\n      if (newPin !== newPinConfirm) {\n        await this.throwError('pins_mismatch');\n      }\n      this.loginSvc.clearAuthInfo();\n      try {\n        let response = await this.loginSvc.authenticateDevice();\n        try {\n          let user = await mobileUserService.resetPassword({\n            reset_password_token: code,\n            password: newPin\n          });\n          console.log('Password Change Successful: ', user);\n          // Now only reset on email is possible\n          if (!clinical6.user.email || !clinical6.user.accountName)\n            clinical6.user = user && (user.email || user.accountName) ? user : clinical6.user; // make sure that clinical6.user points the correct user instance\n          localStorage.setItem('user', JSON.stringify(clinical6.user));\n          let result = await this.loginSvc.authenticateUser(clinical6.user.email || clinical6.user.accountName, newPin);\n          console.log('User Login Success', result);\n          await this.loginSuccess();\n          return true;\n        } catch (reason) {\n          console.log('Password Change Failed: ' + reason.message);\n          await this.throwError('invalid');\n        }\n      } catch (err) {\n        console.error('Error Authenticating ', err);\n        if (err !== 'invalid') {\n          await this.throwError('registration');\n        }\n        throw (err);\n      }\n  }\n\n  /**\n   * @callback createPin        - Callback to create a new Pin and call the 'createPinSuccess' callback in case of success\n   * \n   * @return {Promise<boolean>} - Promise that returns true if the new Pin has been created succesfully\n   * @throws {Error}            - If the pins mismatch or missing/invalid required parameters\n   *\n   * @example <caption> Flow Step - 'createPin' callback example </caption>\n   *  \n   * {\n   *   // ...Flow Step attributes,\n   *  'paths': [\n   *      {\n   *        'button_name': 'UNLOCK APP',\n   *        'callback': 'createPin',\n   *        'capture': false,\n   *        'last': true,\n   *        'is_link_button': false\n   *        'steps': []\n   *     }\n   *   ]\n   * }\n  **/\n  async createPin(): Promise<boolean> {\n\n      /**  \n       * @type {String} newPin         - get the 'new_pin' input for the active Flow Step\n       * @type {String} newPinConfirm  - get the 'confirm_new_pin' input for the active Flow Step\n      **/    \n      const newPin = this.inputValue('new_pin');\n      const newPinConfirm = this.inputValue('confirm_new_pin');\n\n      // do pins match?\n      if (newPin !== newPinConfirm) {\n        await this.throwError('pins_mismatch');\n      } \n      try {\n        const newUser = await mobileUserService.acceptInvitation(this.loginSvc.currToken, { password: newPin, device: Client.instance.device })\n        // Make sure that you store the Mobile User that is returned by this endpoint (done by clinical6)\n        // Updating the localstorage\n        localStorage.setItem('currentUser', JSON.stringify(clinical6.user.toJSON()));\n        localStorage.setItem('user', JSON.stringify(clinical6.user));\n        try {\n            // Once the invitation has been completed, the status of the mobile user should be transition to Active\n            const result = await this.loginSvc.authenticateUser(clinical6.user.email  || clinical6.user.accountName, newPin);\n            this.createPinSuccess();\n            return true;\n        } catch (reason) {\n            await this.throwError('invalid');\n        };\n      } catch(reason) {\n        console.error('create-pin: set PIN failed: ', reason);\n        if(reason!=='invalid')\n          this.showError('Set Pin Failed', reason.message || 'Try Again Later');\n        throw(reason);\n      }\n  }\n\n  /**\n   * @callback loginSuccess - Callback that needs to be overwritten from the child component after login success\n  **/\n  async loginSuccess() {}\n\n  /**\n   * @callback checkCodeSuccess - Callback that needs to be overwritten from the child component after verification-code success\n  **/\n  async checkCodeSuccess() {}\n\n  /**\n   * @callback createPinSuccess - Callback that needs to be overwritten from the child component after resetting pin/password success\n  **/\n  async createPinSuccess() {}\n\n  /**\n   *  Shows a Popup Error with custom title, message and buttons and throws an error\n   * \n   * @param {string} type - Parameters used to get the alert type from the FlowStep alerts attribute\n   * @throws {Error}      - If the Promise fails\n   * \n   * @example <caption> 'Invalid PIN' Alert example </caption>\n   * 'alerts': {\n   *   'invalid': {\n   *      'title': 'Invalid PIN',\n   *      'message': 'Please check your credentials and try again',\n   *      'buttons': null\n   *   },\n   * }\n  **/\n  async throwError(type): Promise<Error> {\n    let alerts = this.step.alerts || {};\n    if (alerts[type])\n      this.showPopup(alerts[type].title, alerts[type].message, alerts[type].buttons);\n    throw(type || 'Error');\n  }\n\n  /**\n   *  Shows a Popup with custom title, message and buttons\n   * \n   * @param {string} title  - Title to use in the Popup\n   * @param {string} msg    - Message to use in the Popup\n   * @param {Array} buttons - An array of optional buttons to use in the Popup\n   * @return {Promise<any>} - Returns a Promise after the button is clicked. Defaults to 'false' for 'Cancel' button, 'true' otherwise\n   *\n   * @example <caption> 'Forgot Pin' Popup example </caption>\n   * 'alerts': {\n   *   'reset_pin': {\n   *       'title': 'Reset Password',\n   *       'message': 'Would you like to reset <br>your 6 digit Password?',\n   *       'buttons': [\n   *         {\n   *           'text': 'Cancel',\n   *           'handler': false\n   *         },\n   *         {\n   *           'text': 'OK',\n   *           'handler': true\n   *         }\n   *       ]\n   *   },\n   * }\n  **/\n  showPopup(title: string , msg: string, buttons: Array<any> = []): Promise<any> {\n      this.utilsSvc.dismissLoader();\n      return new Promise((resolve) => {\n        let btns = [];\n        if (buttons && buttons.length > 0) {\n          for (let button of buttons) {\n            let handler = button.handler != null? button.handler: (button.text && button.text === 'Cancel') ? false: true;\n            let btn = {\n              text: this.translator.getInnerHTML(`${button.text}`) || button.text || 'OK',\n              handler: data => { resolve(handler); },\n              role: 'backdrop'\n            }\n            btns.push(btn);\n          }\n        } else {\n          let btn = {\n            text: 'OK',\n            handler: data => { }\n          };\n          btns.push(btn);\n        }\n        this.alert = this.alertCtrl.create({\n          title: this.translator.getInnerHTML(`${title}`) || title,\n          message:  this.translator.getInnerHTML(`${msg}`) || msg,\n          cssClass: 'email-alert',\n          buttons: btns\n        });\n        // this avoids the multiple click of the alert buttons\n        setTimeout(() => {\n          if (!this.alert.ionViewDidEnter)\n            this.alert.ionViewDidEnter = () => {};\n          this.alert.ionViewDidEnter()\n        }, 400);\n        this.alert.present();\n      });\n  }\n\n  // overwrites the parent function to add new buttons should be placed in the footer\n  displayAsSpecialButton(path: any) {\n\n    // Filter out some redundant or unneeded buttons/paths\n    // that will break the page layout\n    // in particular all buttons that are not to be displayed as\n    // special buttons (ie. light blue wide buttons above the footer)\n    // those include:\n    //  - buttons to be placed in the footer (eg. )Next/Prev, etc..)\n    //  - Buttons to be placed in the toolbar (eg. Plus, Done, ...)\n    //  - buttons managed by some other component (eg. buttons related to file upload fields: medical_board, certificate, ...)\n    //  - leftover/errored buttons (eg. with empty/null button_names )\n    return !(([null,\n      '',\n      'prev',\n      'next',\n      'continue',\n      'complete',\n      'done',\n      'agree',\n      'i agree',\n      'log in',\n      'send',\n      'unlock app']\n      .indexOf(path.button_name.toLowerCase()) >= 0) ||\n      (path.button_name && (path.button_name.indexOf('tag_') > -1)));\n  }\n}\n"]}