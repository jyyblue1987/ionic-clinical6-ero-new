{"version":3,"names":[],"mappings":"","sources":["src/@ionic-clinical6/core/pages/login-flow/login-flow.d.ts"],"sourcesContent":["import { ElementRef } from '@angular/core';\nimport { NavController, NavParams, ModalController, AlertController, Platform } from 'ionic-angular';\nimport { FlowStepPage } from '../../flow_process/flow_steps/flowstep';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { FlowService } from '../../flow_process/flow.service';\nimport { TranslatorService } from '../../translator/translator.service';\nimport { AppLoginService } from '../../login.service';\nimport { UtilsService } from '../../utils.service';\nexport declare class LoginFlowPage extends FlowStepPage {\n    utilsSvc: UtilsService;\n    loginSvc: AppLoginService;\n    translator: TranslatorService;\n    navParams: NavParams;\n    nav: NavController;\n    flowCtlr: FlowService;\n    modalCtrl: ModalController;\n    sanitizer: DomSanitizer;\n    platform: Platform;\n    elementRef: ElementRef;\n    alertCtrl: AlertController;\n    /** @type {boolean} showBackButton - shows the back button on the toolbar if it is true **/\n    showBackButton: boolean;\n    /** @type {any} loader - shows a spinner **/\n    loader: any;\n    /** @type {any} alert - variable to handle the Alert Controller **/\n    alert: any;\n    constructor(utilsSvc: UtilsService, loginSvc: AppLoginService, translator: TranslatorService, navParams: NavParams, nav: NavController, flowCtlr: FlowService, modalCtrl: ModalController, sanitizer: DomSanitizer, platform: Platform, elementRef: ElementRef, alertCtrl: AlertController);\n    ionViewWillEnter(): Promise<void>;\n    /**\n     * @function goNext - Executes the callback function for the active path of the Flow Step and goes to the next Flow Step if it exists\n     *\n     * @param {String} input_id\n    **/\n    goNext(button: any, options?: any): Promise<boolean | void>;\n    /**\n     * helper method to retrieve the input value\n     *\n     * @param {String} input_id\n    **/\n    inputValue(input_id: string): any;\n    /**\n     * @param {any} event - button object passed from nested component in case of 'goToPage' event\n     *\n     * @example <caption> Example of link button </caption>\n     * {\n     *    // Flow Step attributes,\n     *    'inputs': [\n     *      {\n     *        'id': 'pin',\n     *        'storage_attribute': 'pin',\n     *        // ...\n     *        'attribute' : {\n     *          'link_button': 'Forgot Pin', // it must be equal to the \"button_name\" attribute of the path\n     *        }\n     *      }\n     *    ],\n     *    'paths': [\n     *       {\n     *          'button_name': 'Forgot Pin', // it must be equal to the \"attribute.link_button\" attribute of the input\n     *          'callback': null,\n     *          'capture': false,\n     *          'last': true,\n     *          'is_link_button': true // it must be true\n     *          'steps': [\n     *             {\n     *                'step': 'forgot-pin',\n     *                'conditions': []\n     *             }\n     *          ]\n     *       }\n     *   ]\n     * }\n    **/\n    goToPage(event: any): void;\n    /**\n     * @callback checkEmail       - Callback to check registration status of the user\n     *\n     * @return {Promise<boolean>} - Promise that returns false in case of success\n     * @throws {Error}            - If missing/invalid required parameters\n     *\n     * @example <caption> Flow Step - 'checkEmail' callback example </caption>\n     * {\n     *   // ...Flow Step attributes,\n     *  'paths': [\n     *      {\n     *        'button_name': 'NEXT',\n     *        'callback': 'checkEmail',\n     *        'capture': false,\n     *        'last': false,\n     *        'is_link_button': false,\n     *        'steps': []\n     *     }\n     *   ]\n     * }\n    **/\n    checkEmail(): Promise<boolean>;\n    /**\n     * @callback checkCode        - Callback to check the verification code and call the 'checkCodeSuccess' callback in case of success\n     *\n     * @return {Promise<boolean>} - Promise that returns true if the verification code is valid\n     * @throws {Error}            - If missing/invalid required parameters\n     *\n     * @example <caption> Flow Step - 'checkCode' callback example </caption>\n     * {\n     *   // ...Flow Step attributes,\n     *  'paths': [\n     *      {\n     *        'button_name': 'UNLOCK APP',\n     *        'callback': 'checkCode',\n     *        'capture': false,\n     *        'last': true,\n     *        'link_button': false,\n     *        'steps': []\n     *     }\n     *   ]\n     * }\n    **/\n    checkCode(): Promise<boolean>;\n    /**\n     * @callback checkPin         - Callback to start the login procedure and call the 'loginSuccess' callback in case of success\n     *\n     * @return {Promise<boolean>} - Promise that returns true if the New Pin has been reset succesfully\n     * @throws {Error}            - If missing/invalid required parameters\n     *\n     * @example <caption> Flow Step - 'checkPin' callback example </caption>\n     * {\n     *   // ...Flow Step attributes,\n     *  'paths': [\n     *      {\n     *        'button_name': 'SEND',\n     *        'callback': 'checkPin',\n     *        'capture': false,\n     *        'last': true,\n     *        'is_link_button': null,\n     *        'steps': []\n     *     }\n     *   ]\n     * }\n    **/\n    checkPin(): Promise<any>;\n    /**\n     * @callback forgotPin        - Callback to start the pin/password reset procedure\n     *\n     * @return {Promise<boolean>} - Promise that returns false if the activation-code has been sent succesfully to the email provided\n     * @throws {Error}            - If missing/invalid required parameters\n     *\n     * @example <caption> Flow Step - 'forgotPin' Callback example </caption>\n     * {\n     *   // ...Flow Step attributes,\n     *  'paths': [\n     *      {\n     *        'button_name': 'SEND',\n     *        'callback': 'forgotPin',\n     *        'capture': false,\n     *        'last': false,\n     *        'is_link_button': false,\n     *        'steps': []\n     *     }\n     *   ]\n     * }\n    **/\n    forgotPin(): Promise<boolean>;\n    /**\n     * @callback resetPin         - Callback to reset the pin/password and call the 'loginSuccess' callback in case of success\n     *\n     * @return {Promise<boolean>} - Promise that returns true if the New Pin has been reset succesfully\n     * @throws {Error}            - If the pins mismatch or missing/invalid required parameters\n     *\n     * @example <caption> Flow Step - 'resetPin' Callback example </caption>\n     * {\n     *   // ...Flow Step attributes,\n     *  'paths': [\n     *      {\n     *        'button_name': 'UNLOCK APP',\n     *        'callback': 'resetPin',\n     *        'capture': false,\n     *        'last': true,\n     *        'is_link_button': false,\n     *        'steps': []\n     *     }\n     *   ]\n     * }\n    **/\n    resetPin(): Promise<boolean>;\n    /**\n     * @callback createPin        - Callback to create a new Pin and call the 'createPinSuccess' callback in case of success\n     *\n     * @return {Promise<boolean>} - Promise that returns true if the new Pin has been created succesfully\n     * @throws {Error}            - If the pins mismatch or missing/invalid required parameters\n     *\n     * @example <caption> Flow Step - 'createPin' callback example </caption>\n     *\n     * {\n     *   // ...Flow Step attributes,\n     *  'paths': [\n     *      {\n     *        'button_name': 'UNLOCK APP',\n     *        'callback': 'createPin',\n     *        'capture': false,\n     *        'last': true,\n     *        'is_link_button': false\n     *        'steps': []\n     *     }\n     *   ]\n     * }\n    **/\n    createPin(): Promise<boolean>;\n    /**\n     * @callback loginSuccess - Callback that needs to be overwritten from the child component after login success\n    **/\n    loginSuccess(): Promise<void>;\n    /**\n     * @callback checkCodeSuccess - Callback that needs to be overwritten from the child component after verification-code success\n    **/\n    checkCodeSuccess(): Promise<void>;\n    /**\n     * @callback createPinSuccess - Callback that needs to be overwritten from the child component after resetting pin/password success\n    **/\n    createPinSuccess(): Promise<void>;\n    /**\n     *  Shows a Popup Error with custom title, message and buttons and throws an error\n     *\n     * @param {string} type - Parameters used to get the alert type from the FlowStep alerts attribute\n     * @throws {Error}      - If the Promise fails\n     *\n     * @example <caption> 'Invalid PIN' Alert example </caption>\n     * 'alerts': {\n     *   'invalid': {\n     *      'title': 'Invalid PIN',\n     *      'message': 'Please check your credentials and try again',\n     *      'buttons': null\n     *   },\n     * }\n    **/\n    throwError(type: any): Promise<Error>;\n    /**\n     *  Shows a Popup with custom title, message and buttons\n     *\n     * @param {string} title  - Title to use in the Popup\n     * @param {string} msg    - Message to use in the Popup\n     * @param {Array} buttons - An array of optional buttons to use in the Popup\n     * @return {Promise<any>} - Returns a Promise after the button is clicked. Defaults to 'false' for 'Cancel' button, 'true' otherwise\n     *\n     * @example <caption> 'Forgot Pin' Popup example </caption>\n     * 'alerts': {\n     *   'reset_pin': {\n     *       'title': 'Reset Password',\n     *       'message': 'Would you like to reset <br>your 6 digit Password?',\n     *       'buttons': [\n     *         {\n     *           'text': 'Cancel',\n     *           'handler': false\n     *         },\n     *         {\n     *           'text': 'OK',\n     *           'handler': true\n     *         }\n     *       ]\n     *   },\n     * }\n    **/\n    showPopup(title: string, msg: string, buttons?: Array<any>): Promise<any>;\n    displayAsSpecialButton(path: any): boolean;\n}\n"],"file":"login-flow.d.ts"}