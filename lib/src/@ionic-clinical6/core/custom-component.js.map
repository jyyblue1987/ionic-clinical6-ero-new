{"version":3,"sources":["../src/@ionic-clinical6/core/custom-component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,kBAAkB,CAAC;AAE1B;;;;;;;;GAQG;AACH,MAAM,0BAA0B,UAAe;IAC7C,MAAM,CAAC,GAAG;KAAW,CAAC;IACtB,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACjB,+FAA+F;IAC/F,MAAM,gBAAgB,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAExE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,UAAU,CAAC,CAAC;IAE3D,MAAM,CAAC,UAAU,MAAgB;QAC/B,IAAI,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC;QACvE,4EAA4E;QAC5E,IAAI,iBAAiB,GAAG,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAExD,IAAI,gBAAgB,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,GAAG;YACvC,EAAE,CAAC,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;gBAClC,EAAE,CAAC,CAAC,OAAO,UAAU,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;oBAC1C,UAAU,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;gBACtE,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;oBACnC,8DAA8D;oBAC9D,UAAU,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC1C,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,QAAQ,GAAG,IAAI,SAAS,CAAC,UAAU,CAAC,CAAC;QACzC,OAAO,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;IAC5D,CAAC,CAAC;AACJ,CAAC","file":"custom-component.js","sourcesContent":["import { Component } from '@angular/core';\nimport 'reflect-metadata';\n\n/**\n * This custom component allows you to extend a parent\n * component without having to provide a custom annotation, leave blank\n * if you will use the parent config.\n *\n * @param annotation the annotation object for the child component,\n * if you are using this you can override any of the attributes of the parent\n * component.\n */ \nexport function CustomComponent(annotation: any) {\n  const c = class C { };\n  Component({})(c);\n  // const DecoratorFactory = Object.getPrototypeOf(Reflect.getOwnMetadata('annotations', c)[0]);\n  const DecoratorFactory = Object.getPrototypeOf(c['__annotations__'][0]);\n\n  Object.assign(Object.create(DecoratorFactory), annotation);\n\n  return function (target: Function) {\n    var parentTarget = Object.getPrototypeOf(target.prototype).constructor;\n    // var parentAnnotations = Reflect.getMetadata('annotations', parentTarget);\n    var parentAnnotations = parentTarget['__annotations__'];\n\n    var parentAnnotation = parentAnnotations[0];\n    Object.keys(parentAnnotation).forEach(key => {\n      if (parentAnnotation[key] != null) {\n        if (typeof annotation[key] === 'function') {\n          annotation[key] = annotation[key].call(this, parentAnnotation[key]);\n        } else if (annotation[key] == null) {\n          // if the annotation is present on the child component, use it\n          annotation[key] = parentAnnotation[key];\n        }\n      }\n    });\n\n    var metadata = new Component(annotation);\n    Reflect.defineMetadata('annotations', [metadata], target);\n  };\n}"]}