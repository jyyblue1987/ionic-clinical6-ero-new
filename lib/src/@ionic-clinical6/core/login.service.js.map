{"version":3,"sources":["../src/@ionic-clinical6/core/login.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,SAAS,EAAE,MAAM,EAAiB,WAAW,EAAqB,IAAI,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAG3G,IAAa,eAAe,GAA5B;IAcE;QAZA,gBAAW,GAAW,CAAC,CAAC;QAUxB,mBAAc,GAAW,OAAO,CAAC;IAGjC,CAAC;IAED,KAAK;QACH,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC;QACxC,qDAAqD;IACvD,CAAC;IACD;;;;;;;OAOG;IAEG,kBAAkB;;YACtB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC;YAC1C,MAAM,CAAC,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC1C,CAAC;KAAA;IAEK,mBAAmB;;YACvB,6CAA6C;YAE3C,2EAA2E;YAC3E,IAAI,gBAAgB,GAAG,KAAK,CAAC;YAC7B,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;YAEnE,IAAI,iBAAiB,CAAC;YACtB,EAAE,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACnC,iEAAiE;gBACjE,aAAa;gBACb,gBAAgB,GAAG,IAAI,CAAC;gBACxB,SAAS,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC1E,iBAAiB,GAAG,SAAS,CAAC,iBAAiB,CAAC;YAClD,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,sBAAsB;gBACtB,SAAS,CAAC,oBAAoB,GAAG,IAAI,CAAC,cAAc,CAAC;gBACrD,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;gBACpF,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,KAAK,SAAS,IAAI,YAAY,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;oBAC/E,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;gBAChD,CAAC;gBACD,iBAAiB,GAAG,SAAS,CAAC,WAAW,CAAC;YAC5C,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;YAClE,IAAI,CAAC;gBACH,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBAC/C,OAAO,CAAC,GAAG,CAAC,mDAAmD,GAAG,iBAAiB,EAAE,QAAQ,CAAC,CAAC;gBAC/F,SAAS,CAAC,MAAM,CAAC,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC;gBAClC,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC;gBAEnD,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjE,IAAI,CAAC,UAAU,GAAG,iBAAiB,CAAC;gBACpC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC;YACpB,CAAC;YACD,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAAC,CAAC;YACjC,gFAAgF;YAChF,6FAA6F;QACjG,CAAC;KAAA;IAEK,gBAAgB,CAAC,QAAQ,EAAE,QAAQ;;YACvC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACpD,CAAC;KAAA;IAEK,iBAAiB,CAAC,QAAQ,EAAE,QAAQ;;YACxC,4CAA4C;YAC5C,0DAA0D;YAC1D,IAAI,CAAC;gBACH,IAAI,IAAI,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;gBACtD,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,eAAe,GAAG,IAAI,CAAC,IAAI,GAAE,IAAI,CAAC,CAAC,0CAA0C;gBAC/G,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;gBACnD,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;gBACvD,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,kBAAkB,CAAC;gBAC/C,4BAA4B;gBAC5B,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAAC;gBAC/C,4BAA4B;gBAC5B,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;gBACtE,IAAI,CAAC;oBACH,MAAM,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBAChC,CAAC;gBAAC,KAAK,CAAA,CAAE,KAAM,CAAC,CAAC,CAAC;oBAChB,OAAO,CAAC,IAAI,CAAC,gDAAgD,EAAE,KAAK,CAAC,CAAC;gBACxE,CAAC;YACH,CAAC;YACD,KAAK,CAAA,CAAE,GAAI,CAAC,CAAC,CAAC;gBACZ,OAAO,CAAC,KAAK,CAAC,+CAA+C,EAAE,GAAG,CAAC,CAAC;gBACpE,EAAE,CAAC,CACD,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;oBAC9B,GAAG;oBACH,GAAG,CAAC,OAAO;oBACX,GAAG,CAAC,OAAO,CAAC,MAAM;oBAClB,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAE,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,MAAM,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,KAAK,wBAAwB,CAAC,CAAC,CACpG,CAAC,CAAC,CAAC;oBACD,+CAA+C;oBAC/C,IAAI,CAAC,aAAa,EAAE,CAAC;oBACrB,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE;yBACzB,IAAI,CAAE,MAAM,IAAI,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAE,CAAC;oBACrE,uCAAuC;oBACvC,kCAAkC;oBAClC,KAAK;oBACL,gCAAgC;gBAClC,CAAC;gBACD,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,CAAC;YACH,CAAC;QACH,CAAC;KAAA;IAEK,WAAW;;YACf,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC;YAC1C,MAAM,CAAC,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QACnC,CAAC;KAAA;IAEK,YAAY;;YACd,IAAI,CAAC;gBACH,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,WAAW,EAAE,CAAC;gBAC/C,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,kBAAkB,CAAC;gBAC/C,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;gBACvD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACzB,CAAC;YACD,KAAK,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC;gBACV,OAAO,CAAC,KAAK,CAAC,+CAA+C,EAAE,GAAG,CAAC,CAAC;gBACpE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,MAAM,IAAI,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE;oBAC3G,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,KAAK,wBAAwB,CAAC,CAAC,CAAC;gBAC7E,CAAC,CAAC,CAAC,CAAC,CAAC;oBACH,+CAA+C;oBAC/C,OAAO,CAAC,IAAI,CAAC,iCAAiC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBACxE,IAAI,CAAC,aAAa,EAAE,CAAC;oBACrB,IAAI,CAAC;wBACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;wBAChD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;wBAC1C,MAAM,CAAC,OAAO,CAAC;oBACjB,CAAC;oBAAC,KAAK,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC;wBAAC,MAAK,CAAC,GAAG,CAAC,CAAC;oBAAC,CAAC;gBAC9B,CAAC;gBACD,IAAI,CAAC,CAAC;oBACJ,MAAK,CAAC,GAAG,CAAC,CAAC;gBACb,CAAC;YACH,CAAC;QACL,CAAC;KAAA;IAEK,eAAe;;YACnB,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,MAAM,CAAC;oBACpC,GAAG,EAAE,OAAO;oBACZ,gBAAgB,EAAE,OAAO;iBAC5B,CAAC,CAAC;gBACH,OAAO,CAAC,IAAI,CAAC,kDAAkD,EAAE,MAAM,CAAC,CAAC;gBACzE,MAAK,CAAC,MAAM,CAAC,CAAC;YACd,CAAC;YACD,KAAK,CAAA,CAAE,MAAO,CAAC,CAAC,CAAC;gBACb,OAAO,CAAC,IAAI,CAAC,oDAAoD,EAAE,MAAM,CAAC,CAAC;gBAC3E,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBAClD,MAAK,CAAC,IAAI,CAAC,CAAC;gBACd,CAAC;gBACD,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,KAAK,CAAC;gBACf,CAAC;YACL,CAAC;QACL,CAAC;KAAA;IAED,aAAa;QACX,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,eAAe;QACb,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;QACpF,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,KAAK,SAAS,IAAI,YAAY,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;YAC/E,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;QAChD,CAAC;QACD,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC;QACvC,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAClC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC/C,SAAS,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC;YAC5B,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,OAAO,EAAE,MAAM;SAChB,CAAC,CAAC;QACH,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC;QAC3B,YAAY,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;IACD,aAAa;QACX,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAChC,SAAS,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IAC9B,CAAC;IAEK,eAAe,CAAC,KAAK;;YACzB,IAAI,UAAU,GAAG,EAAE,CAAC;YACpB,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5B,UAAU,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;YAC9B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,UAAU,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC;YACrC,CAAC;YAED;;eAEG;YACH,IAAI,CAAC;gBACH,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,0CAA0C,EAAE,MAAM,EAAE;oBAC/F,IAAI,EAAE,EAAE,IAAI,EAAE,0BAA0B,EAAE,UAAU,EAAE,UAAU,EAAE;iBACnE,CAAC,CAAC;gBACH,MAAM,CAAC,QAAQ,CAAC;YAClB,CAAC;YAAC,KAAK,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC;gBACZ,MAAK,CAAC,GAAG,CAAC,CAAC;YACb,CAAC;QACH,CAAC;KAAA;IAED,cAAc;IACd,CAAC;CACF,CAAA;AAlOY,eAAe;IAD3B,UAAU,EAAE;;GACA,eAAe,CAkO3B;SAlOY,eAAe;AAoO5B,MAAM,CAAC,MAAM,SAAS,GAAG;IACvB,WAAW,EAAE,CAAC;IACd,aAAa,EAAE,CAAC;IAChB,WAAW,EAAE,CAAC;IACd,iBAAiB,EAAE,CAAC;IACpB,qBAAqB,EAAE,CAAC;IACxB,kBAAkB,EAAE,CAAC;IACrB,kBAAkB,EAAE,CAAC;CAEtB,CAAC","file":"login.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { clinical6, Device, deviceService, userService, mobileUserService, User, Client } from 'clinical6';\n\n@Injectable()\nexport class AppLoginService {\n  loginState: any;\n  MAXATTEMPTS: number = 1;\n  remainingAttempts: number;\n\n  /**\n   * Used to reset values\n   */\n  uuid: string;\n  technology: string;\n  appVersion: string;\n  currToken: string;\n  MOBILE_APP_KEY: string = 'dummy';\n\n  constructor() {\n  }\n\n  reset() {\n    this.remainingAttempts = 1;\n    this.loginState = AUTHSTATE.STARTING_UP;\n    // UUID does remain always the same, no need to reset\n  }\n  /**\n   * Authentication steps:\n   *  1. Device Registration\n   *  2. Mobile User Registration\n   *  3. Session Registration\n   *\n   * Let's move from 1 to 3 depending on available information\n   */\n\n  async authenticateDevice() {\n    this.remainingAttempts = this.MAXATTEMPTS;\n    return await this._authenticateDevice();\n  }\n\n  async _authenticateDevice() {\n    // return new Promise( (resolve, reject) => {\n\n      // It looks like here I can't use Client directly (getting transpile error)\n      var deviceTokenValid = false;\n      console.log('_authenticateDevice Client.config', clinical6.config);\n\n      let successLoginState;\n      if (localStorage.getItem('device')) {\n        // TODO: double check whether the deviceToken is still up to date\n        // TODO: ....\n        deviceTokenValid = true;\n        clinical6.device = new Device(JSON.parse(localStorage.getItem('device')));\n        successLoginState = AUTHSTATE.DEVICE_AUTHORIZED;\n      }\n      else {\n        // Register new Device\n        clinical6.mobileApplicationKey = this.MOBILE_APP_KEY;\n        const storedDevice = new Device(JSON.parse(localStorage.getItem('device') || '{}'));\n        if (clinical6.device.pushId === 'FAKE_ID' && storedDevice.pushId !== 'FAKE_ID') {\n          clinical6.device.pushId = storedDevice.pushId;\n        }\n        successLoginState = AUTHSTATE.NEW_INSTALL;        \n      }\n      console.log('_authenticateDevice, before save', clinical6.device);\n      try {\n        const response = await clinical6.device.save();\n        console.log('_authenticateDevice clinical6.device.save() case ' + successLoginState, response);\n        clinical6.device.id = response.id;\n        clinical6.authToken = clinical6.device.accessToken;\n\n        localStorage.setItem('device', JSON.stringify(clinical6.device));\n        this.loginState = successLoginState;\n        return (response);\n      }\n      catch (err) { console.log(err); }\n      // The following catch mainly to make sure pushId and other information is saved\n      // .catch( err => console.warn ('_authenticateDevice clinical6.device.save() error' , err)); \n  }\n\n  async authenticateUser(username, password) {\n    this.remainingAttempts = this.MAXATTEMPTS;\n    return this._authenticateUser(username, password);\n  }\n\n  async _authenticateUser(username, password) {\n    // return new Promise((resolve, reject) => {\n    //   clinical6.signIn(username, password).then((user) => {\n    try {\n      let user = await clinical6.signIn(username, password);\n      user = user.type && user.type === 'user_sessions' ? user.user: user; // to fix error about 'user_sessions' type\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('authToken', clinical6.authToken);\n      this.loginState = AUTHSTATE.USER_AUTHENTICATED;\n      // resolve(this.loginState);\n      console.log('Login Service User signIn', user);\n      // return (this.loginState);\n      console.log('_authenticateUser before device save', clinical6.device);\n      try {\n        await clinical6.device.save();\n      } catch( error ) {\n        console.warn('_authenticateUser, clinical6.device.save error', error);\n      }\n    }\n    catch( err ) {\n      console.error('_authenticateUser Unable to Register the User', err);\n      if (\n        (this.remainingAttempts-- > 0) && \n        err && \n        err.message && \n        err.message.errors && \n        err.message.errors.find( er => ((er.status === '422') && (er.detail === 'Device already in use.')) )\n      ) {\n        // OK reset auth info and register from scratch\n        this.clearAuthInfo();\n        return this._authenticateDevice()\n               .then( result => this._authenticateUser(username, password) );\n        //   .then((result) => resolve(result))\n        //   .catch((err) => reject(err));\n        // })\n        // .catch((err) => reject(err));\n      }\n      else {\n        throw (err);\n      }\n    }\n  }\n\n  async guestSignIn() {\n    this.remainingAttempts = this.MAXATTEMPTS;\n    return await this._guestSignIn();\n  }\n\n  async _guestSignIn() {\n      try {\n        const response = await clinical6.signInGuest();\n        this.loginState = AUTHSTATE.SIGNED_IN_AS_GUEST;\n        localStorage.setItem('authToken', clinical6.authToken);\n        return this.loginState;\n      }\n      catch(err) {\n        console.error('_authenticateUser Unable to Register the User', err);\n        if ((this.remainingAttempts-- > 0) && err && err.message && err.message.errors && err.message.errors.find((er) => {\n          return ((er.status === '422') && (er.detail === 'Device already in use.'));\n        })) {\n          // OK reset auth info and register from scratch\n          console.warn('Retry guest sign in, attempts: ', this.remainingAttempts);\n          this.clearAuthInfo();\n          try {\n            const result = await this._authenticateDevice();\n            const _result = await this._guestSignIn();\n            return _result;\n          } catch(err) { throw(err); }\n        }\n        else {\n          throw(err);\n        }\n      }\n  }\n\n  async verifyPinExists() {\n    try {\n      const result = await userService.setPin({\n          pin: 'dummy',\n          pin_confirmation: 'dummy'\n      });\n      console.warn('verifyPinExists Check if User PIN exists error: ', result);\n      throw(result);\n      }\n      catch( reason ) {\n          console.warn('verifyPinExists Check if User PIN exists respone: ', reason);\n          if (reason.details.indexOf('already exists') > -1) {\n            throw(true);\n          }\n          else {\n            return false;\n          }\n      }\n  }\n\n  clearAuthInfo() {\n    this.resetDeviceInfo();\n    this.clearUserInfo();\n  }\n\n  resetDeviceInfo() {\n    const storedDevice = new Device(JSON.parse(localStorage.getItem('device') || '{}'));\n    if (clinical6.device.pushId === 'FAKE_ID' && storedDevice.pushId !== 'FAKE_ID') {\n      clinical6.device.pushId = storedDevice.pushId;\n    }\n    const pushId = clinical6.device.pushId;\n    localStorage.removeItem('device');\n    Client.instance.storageUtility.clear('device');\n    clinical6.device = new Device({\n      udid: this.uuid,\n      technology: this.technology,\n      appVersion: this.appVersion,\n      push_id: pushId\n    });\n    clinical6.authToken = null;\n    localStorage.removeItem('authToken');\n  }\n  clearUserInfo() {\n    localStorage.removeItem('user');\n    clinical6.user = new User();\n  }\n\n  async registerAccount(input) {\n    var attributes = {};\n    if (input.indexOf('@') > -1) {\n      attributes['email'] = input;\n    } else {\n      attributes['account_name'] = input;\n    }\n\n    /**\n     * TODO: Using fetch until the SDK is updated to return the response object instead of a plain string\n     */\n    try {\n      const response = await Client.instance.fetch('/v3/mobile_users/registration_validation', 'post', {\n        data: { type: 'registration_validations', attributes: attributes }\n      });\n      return response;\n    } catch(err) {\n      throw(err);\n    }\n  }\n\n  postLoginInits() {\n  }\n}\n\nexport const AUTHSTATE = {\n  STARTING_UP: 1,\n  RESTARTING_UP: 2,\n  NEW_INSTALL: 3,\n  DEVICE_AUTHORIZED: 4,\n  DEVICE_NOT_AUTHORIZED: 5,\n  USER_AUTHENTICATED: 6,\n  SIGNED_IN_AS_GUEST: 7,\n\n};"]}