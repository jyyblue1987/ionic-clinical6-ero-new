{"version":3,"names":[],"mappings":"","sources":["src/@ionic-clinical6/core/clinical6.service.d.ts"],"sourcesContent":["import { Events } from 'ionic-angular';\nimport { Notification, Flow, AppMenu } from 'clinical6';\nimport { AppConfig } from './config/app.config';\nexport declare class Clinical6Service {\n    events: Events;\n    appConfig: AppConfig;\n    supportContactInfo: any;\n    userID: string;\n    siteID: string;\n    profile: any;\n    xAuth_token: string;\n    /**\n     * TODO: once V3 is integrated this won't be needed anymore\n     */\n    useDynContentV2: boolean;\n    mobileMenus: any;\n    menuBadges: any;\n    notifications: Array<any>;\n    flows: {\n        [key: string]: Flow;\n    };\n    constructor(events: Events, appConfig: AppConfig);\n    /**\n     * Get Notifications\n     *\n     * @return {Promise<Notification[]>}\n     */\n    getNotifications(): Promise<Notification[]>;\n    /**\n     * Get Dynamic Content\n     * @param {String} className Name of class to be queries\n     * @param {Number} page Page number currently on (0 is all)\n     * @param {Number} itemCount Total number of items on a page\n     * @return {Promise} Promise for use with Angularjs\n     */\n    getDynamicContent(className: string, page?: number, itemCount?: number): Promise<any>;\n    /**\n     * Get Flow\n     * @param {String} id The flow for a certain item\n     */\n    getFlow(id: string): Promise<Flow>;\n    /**\n     * Get Menus (Mobile Menus)\n     * @return {Promise} Promise for use with Angularjs\n     */\n    getMenus(useOldApi?: any): Promise<AppMenu[]>;\n    /**\n     * Get Profile\n     * @return {Promise} Promise for use with Angularjs\n     */\n    getProfile(refresh?: boolean): Promise<any>;\n    /**\n     * Get Site\n     * @param {string} permanent_link - Permanent Link for site (given by user at login)\n     */\n    _getSite(permanent_link: string): Promise<any>;\n    /**\n     * Logs in the user\n     * @param {string} username The username required for login\n     * @param {string} password the password required for login\n     * @return {Promise} Promise for use with Angularjs\n     */\n    login(username: string, password: string): Promise<any>;\n    /**\n     * Logs out the user\n     * @return {Promise} Promise for use with Angularjs\n     */\n    logout(): Promise<string>;\n    /**\n     * Set the pin for a confirmation pin token\n     * @param {string} pin a user input to set a pin\n     * @param {string} pin_confirmation a token provided by the xauth to setup a pin.\n     */\n    setPin(pin: string, pin_confirmation: string): Promise<string>;\n    /**\n     * On Error (Event)\n     * @param  {Error} e Error object returned from server\n     * @return {null} returns nothing\n     */\n    onError(e: any): void;\n    /**\n     * silentSignIn()\n     * sets the Clinical6 auth-token from the local storage\n     * @return {boolean} returns true if successfull, false otherwise\n     */\n    silentSignIn(): boolean;\n}\n"],"file":"clinical6.service.d.ts"}