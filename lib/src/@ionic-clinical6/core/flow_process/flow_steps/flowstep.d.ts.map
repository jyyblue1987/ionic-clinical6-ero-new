{"version":3,"names":[],"mappings":"","sources":["src/@ionic-clinical6/core/flow_process/flow_steps/flowstep.d.ts"],"sourcesContent":["import { ElementRef } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { NavController, NavParams, Loading, ModalController, Platform, AlertController } from 'ionic-angular';\nimport { AppFlowInput } from '../flow_inputs/flow-input.model';\nimport { FlowService } from '../flow.service';\nimport { BasePage } from '../../pages/base/base-page';\nimport { UtilsService } from '../../utils.service';\nexport declare class FlowStepPage extends BasePage {\n    utilsSvc: UtilsService;\n    navParams: NavParams;\n    nav: NavController;\n    flowCtlr: FlowService;\n    modalCtrl: ModalController;\n    sanitizer: DomSanitizer;\n    platform: Platform;\n    elementRef: ElementRef;\n    alertCtrl: AlertController;\n    nextButtonNames: Array<string>;\n    prevButtonNames: Array<string>;\n    prevButtonName: string;\n    nextButtonName: string;\n    navbarTitle: string;\n    backButtonText: string;\n    themeColor: string;\n    isAnswerValid: boolean;\n    footerPrevNext: boolean;\n    showImage: boolean;\n    isNavigating: boolean;\n    flow: any;\n    step: any;\n    nextStep: any;\n    inputs: AppFlowInput[];\n    fields: any;\n    inputvalues: any;\n    existingId: any;\n    setupOrManage: string;\n    editing: boolean;\n    noDelete: boolean;\n    comment: {\n        present: boolean;\n        body: any;\n        custom: boolean;\n    };\n    loadingCtrl: Loading;\n    formValid: boolean;\n    previousResponse: any;\n    filter: any;\n    constructor(utilsSvc: UtilsService, navParams: NavParams, nav: NavController, flowCtlr: FlowService, modalCtrl: ModalController, sanitizer?: DomSanitizer, platform?: Platform, elementRef?: ElementRef, alertCtrl?: AlertController);\n    /**\n     * This method can be overridden to add additional/different button names\n     * that help identifying the Prev-Next layout\n     */\n    setButtonNames(): void;\n    ngOnInit(): void;\n    /**\n     * Returns the step to go to when clicking on \"Next\" button\n     * Tipically a flow page can have many buttons and possible\n     * corresponding next steps. In case of a Prev / Next footer page there\n     * is no strict way to determine which one is the 'Prev' step and which the 'Next'.\n     * This method can be overridden and it's used to determine the 'Next' step.\n     * (The Prev step would presumably be a 'Back' button)\n     */\n    selectNextStep(): any;\n    isThisAPrevNextFooterPage(): boolean;\n    ionViewDidLoad(): void;\n    checkComments(): Promise<void>;\n    handleComment(): void;\n    ionViewWillEnter(): Promise<void>;\n    goToPage(event: any): void;\n    updateControlValue(event: any): void;\n    updateFormStatus(valid: any): void;\n    doneCallback(): void;\n    hasUploadButton(): boolean;\n    isThisAManageStep(): any;\n    displayAsSpecialButton(path: any): boolean;\n    enterEditMode(): void;\n    doneEditing(): void;\n    doneEditingCallback(): void;\n    isThisASingleStep(): boolean;\n    getDoneEditLabel(): \"Done\" | \"Next\" | \"Edit\";\n    actionDoneEdit(): void;\n    isActionBtnDisabled(): boolean;\n    getRelatedConditionalSteps(nextPathName: string): any;\n    gotoFlowLegacy(name: string, options?: any): void;\n    gotoFlow(name: string, options?: any): Promise<boolean | void>;\n    showPrevButton(): boolean;\n    imgLoaded(): void;\n    imgError(event: any): void;\n    trustHTML(text: string): SafeHtml;\n    onError(message: any): void;\n    showError(subtitle: string, body: any): void;\n    deleteItem(id?: string): void;\n    /**\n     * This is to Handle the 'Go' button on the device Keyboard for iOS\n     * @param event\n     */\n    handleGoButton(event: KeyboardEvent): void;\n    goBack(): void;\n    popStack(): void;\n    getIndexByBFS(): void;\n}\n"],"file":"flowstep.d.ts"}