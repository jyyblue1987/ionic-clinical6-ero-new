{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow_inputs/stepinput.factory.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,0BAA0B,EAC1B,sBAAsB,EAEtB,6BAA6B,EAC7B,yBAAyB,EAEzB,8BAA8B,EAC9B,sBAAsB,EACvB,MAAM,sBAAsB,CAAC;AAE9B,OAAO,EAAE,sBAAsB,EAAE,MAAM,iCAAiC,CAAC;AAEzE;;;;;;;;;;;;GAYG;AACH,MAAM;IAgBJ;;;;;OAKG;IACH,MAAM,CAAC,OAAO,CAAC,KAAiB;QAC9B,MAAM,CAAC,gBAAgB,CAAC,UAAU,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,MAAM,CAAC,GAA0B;QACtC,gBAAgB,CAAC,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,gBAAgB,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;IACpF,CAAC;;AA9BD;;;GAGG;AACI,2BAAU,GAA0B;IACzC,OAAO,EAAE,sBAAsB;IAC/B,SAAS,EAAE,yBAAyB;IACpC,eAAe,EAAE,8BAA8B;IAC/C,iBAAiB,EAAE,6BAA6B;IAChD,MAAM,EAAE,sBAAsB;IAC9B,WAAW,EAAE,0BAA0B;IACvC,MAAM,EAAE,sBAAsB;CAC/B,CAAC","file":"stepinput.factory.js","sourcesContent":["import {\n  AgreementCheckboxComponent,\n  StepInputDateComponent,\n  StepInputFileUploadComponent,\n  StepInputMultiChoiceComponent,\n  StepInputNumericComponent,\n  StepInputPrePopulatedComponent,\n  StepInputSingleChoiceComponent,\n  StepInputTextComponent\n} from '../flow_inputs/index';\nimport { InputState } from '../flow_inputs/input.model';\nimport { StepInputTimeComponent } from './time/stepinput-time.component';\n\n/**\n * Represents a class where all of the supported\n * types of input are defined by a key value map.\n *\n * It has the ability to override the components used for\n * a type or add new ones via the setMap method. \n * \n * @example <caption> Override existing input </caption>\n *  StepInputFactory.setMap('numeric', MyCustomNumericInput)\n * \n * @example <caption> Add a new type of input </caption>\n *  StepInputFactory.setMap('carousel', CarouselInput)\n */\nexport class StepInputFactory {\n\n  /**\n   * @type {{[id: string] : any]}} - A key/value map containing the relation of the\n   *  type of input to its instance.\n   */\n  static FactoryMap: { [id: string]: any } = {\n    'input': StepInputTextComponent,\n    'numeric': StepInputNumericComponent,\n    'single_choice': StepInputSingleChoiceComponent,\n    'multiple_choice': StepInputMultiChoiceComponent,\n    'date': StepInputDateComponent,\n    'agreement': AgreementCheckboxComponent,\n    'time': StepInputTimeComponent\n  };\n\n  /**\n   * Provides the appropriate Input Component for the given input type.\n   *\n   * @param  {InputState} input  - The input model object\n   * @return {class}             - An instance of the component associated to the given input\n   */\n  static factory(input: InputState) {\n    return StepInputFactory.FactoryMap[input['question_type']];\n  }\n\n  /**\n   * Sets or adds an InputComponent to the map.\n   * @param {Object} map - A key/val mapping from contentType to Input component\n   */\n  static setMap(map: { [id: string]: any }) {\n    StepInputFactory.FactoryMap = Object.assign({}, StepInputFactory.FactoryMap, map);\n  }\n\n  // /**\n  //  * Sets or adds an InputComponent to the map.\n  //  * \n  //  * @param id        - The type of the input\n  //  * @param component - The instance of the component to be mapped \n  //  */\n  // static setMap(id: string, component: any) {\n  //   StepInputFactory.FactoryMap[id] = component;\n  // }\n}\n"]}