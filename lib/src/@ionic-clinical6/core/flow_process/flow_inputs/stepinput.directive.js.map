{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow_inputs/stepinput.directive.ts"],"names":[],"mappings":"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","file":"stepinput.directive.js","sourcesContent":["import { Directive, ViewContainerRef, EventEmitter, Output, Input, ComponentFactoryResolver } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { InputState } from './input.model';\n\nimport { StepInputFactory } from './stepinput.factory';\nimport { StepInputComponent } from './stepinput.component';\nimport { StepInputTextComponent } from '../flow_inputs/index';\nimport { ValidationService } from './validation.service';\n\n\n/**\n * This Directive provides a dynamic way to create InputContainers,\n * it dinamically instantiates inputs using the {@link StepInputFactory}\n * with the given input type\n * \n * Most of the times you won't need to use this directive, as its internally\n * used by the input container. Standalone use is still available.\n * \n * @example\n * <ng-template step-input *ngFor=\"let input of inputList; let index = index\"\n * [input]=\"input\"\n * [value]=\"(fields && fields[input.inputId]) || ''\" \n * [group]=\"mainForm\">\n * </ng-template>\n */\n@Directive({\n    selector: '[step-input]'\n})\nexport class StepInputDirective {\n\n    /** @type {string} - Represents the style of the label ('floating' or 'stacked') */\n    @Input() labelStyle: string;\n\n    /** @type {InputState} - Represents the input model of the FlowProcess step */\n    @Input() input: InputState;\n\n    /** @type {any} - Represents the value of the input */\n    @Input() value: any;\n\n    /** @type {FormGroup} - The main FormGroup containing all inputs as FormControls */\n    @Input('group') public mainForm: FormGroup;\n\n    /** @type {any} */\n    @Input() filter: any;\n\n    @Output() goToPage = new EventEmitter();   // Action associated to the 'Back' button click\n\n    inputCodeMap: { [key: string]: string } = {};\n\n    constructor(\n        public viewContainerRef: ViewContainerRef,\n        private componentFactoryResolver: ComponentFactoryResolver) { }\n\n    /** Angular lifecycle callback. */\n    ngOnInit() {\n        // We get the input component from a factory, given the {@link InputState.inputType}\n        let inputComponent = StepInputFactory.factory(this.input);\n\n        let componentFactory = this.componentFactoryResolver.resolveComponentFactory(inputComponent);\n        let componentRef = this.viewContainerRef.createComponent(componentFactory);\n\n        let inputInstance = componentRef.instance as StepInputComponent;\n\n\n        // Initialize the Input decorators on the new instance\n        inputInstance.flowInput = this.input;\n        inputInstance.value = this.value;\n        inputInstance.subForm = this.mainForm;\n        inputInstance.labelStyle = this.labelStyle;\n        inputInstance.inputFilter = this.filter;\n        inputInstance.goToPage = this.goToPage;\n\n        let inputId = inputInstance.flowInput.inputId;\n\n        if (inputInstance.flowInput['code']) {\n            ValidationService.setCodeMap(inputInstance.flowInput['code'], inputId.toString());\n        }\n\n        let hasEquality = (inputInstance.flowInput['validation_details'] && inputInstance.flowInput['validation_details']['equality']) || false;\n        if (hasEquality) {\n            let equalityCode = inputInstance.flowInput['validation_details']['equality']['input_question_code'] || null;\n            let inputCode = inputInstance.flowInput['code'];\n\n            this.mainForm.setValidators([ValidationService.equalityValidation(inputCode, equalityCode)]);\n        }\n\n        inputInstance.initInput();\n\n        this.mainForm.addControl(`${this.input.inputId}`, new FormControl(this.value, Validators.compose(inputInstance.requiredValidators)));\n    }\n}"]}