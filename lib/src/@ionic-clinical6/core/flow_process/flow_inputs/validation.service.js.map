{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow_inputs/validation.service.ts"],"names":[],"mappings":"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","file":"validation.service.js","sourcesContent":["import { FormControl, FormGroup } from '@angular/forms';\nimport { Component, Injectable } from '@angular/core';\n/*\ninterface ValidationResult {\n    [key: string]: boolean;\n}\n*/\n@Injectable()\nexport class ValidationService {\n\n    static inputCodeMap: { [inputCode: string]: string } = {};\n\n    // phone_number masks\n    static maskPhone1 = ['+', /[1]/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\n    static maskPhone2 = ['+', /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\n    static maskPhone3 = [/[1-9]/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\n    // zip_code masks\n    static maskZipCode1 = [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/];\n    static maskZipCode2 = [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, ' ', '-', ' ', /\\d/, /\\d/, /\\d/, /\\d/];\n    // pin mask\n    static maskPin = [/\\d/, /\\d/, /\\d/, /\\d/];\n    static maskPassword = [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/];\n    // patientId mask\n    static maskPatientId = [/\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/];\n\n\n    static setCodeMap(inputCode: string, inputId: string, ) {\n        ValidationService.inputCodeMap[inputCode] = inputId;\n    }\n\n    static phoneMask(rawValue: string) {\n        if (rawValue[0] === '+') {\n            if (rawValue[1] === '1') {\n                if (rawValue.length > 15) return this.extendMask(this.maskPhone1, ' ', 17);\n                else return this.maskPhone1;\n            }\n            else {\n                if (rawValue.length > 16) return this.extendMask(this.maskPhone2, ' ', 16);\n                else return this.maskPhone2;\n            }\n        }\n        else {\n            if (rawValue.length > 12) return this.extendMask(this.maskPhone3, ' ', 20);\n            else return this.maskPhone3;\n        }\n    }\n\n    static zipCodeMask(rawValue: string) {\n        if (rawValue.length > 5) return this.maskZipCode2;\n        else return this.maskZipCode1;\n    }\n\n    static passwordMask(type: string, minLength: number, maxLength: number) {\n        var mask = [];\n        if (type === 'numeric') {\n            return Array(maxLength).fill(/\\d/);\n        }\n    }\n\n    // format the zip code if the field is pre-populated\n    static fillZipCode(format: string, length: number) {\n        if (format.length >= length) {\n            if (format.length > 5) return format.substring(0, 5).concat(' - ').concat(format.substring(5, 9));\n            else return format;\n        }\n        return this.fillZipCode('0' + format, length);\n    }\n\n    static extendMask(mask: any, char: any, length: number) {\n        let extend = mask;\n        extend.push(char);\n        for (let i = 0; i < length; i++)\n            extend.push(/\\d/);\n        return extend;\n    }\n\n    static phoneValidator(control: FormControl) {\n        let phone_number = /^[0-9]{10}/;\n        let numControl = '';\n        if (control.value)\n            numControl = control.value.replace(/[-|+| ]/gi, '');\n        return phone_number.test(numControl) ? null : { 'invalidPattern': true };\n    }\n\n    // helper validator  to avoid white spaces/empty spaces\n    static noWhitespaceValidator(control: FormControl) {\n        let isWhitespace = (control.value || '').trim().length === 0;\n        let isValid = !isWhitespace;\n        return isValid ? null : { 'invalidPattern': true };\n    }\n\n    static zipCodeValidator(control: FormControl) {\n        let postcode = /^\\d{5}( - )?(\\d{4})?$/;\n        return postcode.test(control.value) ? null : { 'invalidPattern': true };\n    }\n\n    static cityValidator(control: FormControl) {\n        let postcode = /^[a-zA-Z\\- ]+$/;\n        return postcode.test(control.value) ? null : { 'invalidPattern': true };\n    }\n\n    static emailValidator(control: FormControl) {\n        let emailPattern = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+([.][a-zA-Z0-9-]+)+$/;\n        return emailPattern.test(control.value) ? null : { 'invalidPattern': true };\n    }\n\n    static pinValidator(control: FormControl) {\n        let pinPattern = /^[0-9]{4}/;\n        return pinPattern.test(control.value) ? null : { 'invalidPattern': true };\n    }\n    static matchPasswords(passwordKey: string, confirmPasswordKey: string) {\n        return (group: FormGroup): { [key: string]: any } => {\n            let password = group.controls[passwordKey];\n            let confirmPassword = group.controls[confirmPasswordKey];\n\n            if (password.value !== confirmPassword.value) {\n                return {\n                    mismatchedPasswords: true\n                };\n            }\n        };\n    }\n\n    static codeValidation(codeValue: string) {\n        return (control: FormControl): { [key: string]: any } => {\n            let inputValue = control.value;\n\n            if (codeValue && (inputValue !== codeValue)) {\n                return {\n                    nonRegisteredEmail: true\n                };\n            }\n\n        }\n    }\n\n    static equalityValidation(inputCode: string, equalityCode: string) {\n        return (group: FormGroup): { [key: string]: any } => {\n            if (!inputCode || !equalityCode) return { misMatchValues: false };\n\n            let inputId = ValidationService.inputCodeMap[inputCode];\n            let equalityId = ValidationService.inputCodeMap[equalityCode];\n\n            if (inputId && equalityId) {\n                let codeValue = group.controls ? ((group.controls[inputId] && group.controls[inputId].value) || '') : '';\n                let equalityValue = group.controls ? ((group.controls[equalityId] && group.controls[equalityId].value) || '') : '';\n                if (equalityValue !== codeValue) {\n                    return {\n                        misMatchValues: true\n                    }\n                }\n            }\n\n        }\n    }\n}"]}