{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow_inputs/multi_choice/stepinput-multi_choice.component.ts"],"names":[],"mappings":"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","file":"stepinput-multi_choice.component.js","sourcesContent":["import { Component, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\nimport { InputState, ChoiceState, InputStyle } from '../input.model';\nimport { StepInputComponent } from '../stepinput.component';\n\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\n\n/**\n * This class represents an input of type multiple choice.\n * \n * The value its the list of choices selected by the user.\n */\n@Component({\n  selector: 'stepinput-multi_choice',\n  templateUrl: 'stepinput-multi_choice.component.html',\n})\nexport class StepInputMultiChoiceComponent extends StepInputComponent {\n\n  /** @type {any} - Callback function for value changes, coming from the dummy input */\n  changed;\n\n  /** @type {any} - Callback function for focusing the input, coming from the dummy input */\n  touched;\n\n  /** @type {string} - A label containing the choice's body */\n  choiceText: string;\n\n  /** @type {boolean} - Flag indicating if the dropdown should shown on the input. Used when the style its that of dropdown. */\n  showDropdown: boolean = false;\n\n  /** @type {boolean} - Flag indicating if the dropdown its selected. Used when the style its that of dropdown. */\n  dropdownSelected: boolean = false;\n\n  /** @type {any} -  */\n  timeoutBlur;\n\n  /** @type {any} - The dom element for the input */\n  @ViewChild('dropdownInput') dropdownInputEl;\n\n  /** Angular lifecycle callback to check existing values and validate them */\n  ngOnInit() {\n    const self = this;\n\n    // Set Values\n    if ((this.value) && (this.value.length > 0)) {\n\n      if (this.value.constructor !== Array) {\n        // try to parse it to a JSON array,\n        // TODO, check why the platform returns a string like \"[\\\"Monday\\\", \\\"Wednesday\\\", \\\"Thursday\\\"]\" instead of an Array\n        let value = JSON.parse(this.value);\n        if (value.constructor !== Array) return; // silently give up with setting the values\n        this.value = value;\n      }\n      this.value.forEach(val => {\n        let item = this.choices.find(choice => (choice.choiceBody === val));\n        if (item) item.choiceSelected = true;\n      });\n\n      let numberSelected = this.emit();\n      this.validate(numberSelected);\n    }\n\n    if (this.style === InputStyle.dropdown) this.renderChoiceText();\n\n  }\n\n  /**\n  * Indicates the checkbox on the input has been checked/unchecked.\n  * \n  * @param opt - The value of the input when the change was made\n  */\n  selectOption() {\n    // When the checkboxeschange their value we manually\n    // check for those selected and send it to the dummy input\n    // via the changed callback\n    let choiceValues = this.choices\n      .filter(choice => { return choice.choiceSelected; })\n      .map(choice => { return choice.choiceId; });\n    this.changed(choiceValues);\n    this.touched();\n\n  }\n\n  /** \n   * Sets the radio button to checked if there's a value for \n   * the radio.\n   * \n   * @param numberSelected - The value of the radio, 0 if its not checked, different than 0 otherwise.\n   */\n  validate(numberSelected: number) {\n    if (this.subForm.controls['input'])\n      this.subForm.controls['input'].setValue(numberSelected === 0 ? undefined : 'true');\n  }\n\n  /** \n   * \n   */\n  emit() {\n    let choiceValues = [];\n    for (let choiceItem of this.choices)\n      if (choiceItem.choiceSelected) {\n        choiceValues.push(choiceItem.choiceId);\n        this.choiceText = choiceItem.choiceBody + ' ';\n      }\n    return choiceValues.length;\n  }\n\n  /**\n   * Render the choice text if the values are week days.\n   */\n  renderChoiceText() {\n    this.choiceText = '';\n    for (let i = 0, prevChoice, choiceItem, n = 0; choiceItem = this.choices[i]; i++) {\n      // for (let choiceItem of this.choiceItems)\n\n      if (choiceItem.choiceSelected) {\n        if (!prevChoice) {\n          // first item of a group\n          this.choiceText = this.choiceText +\n            (this.choiceText.length > 0 ? ' ' : '') +\n            choiceItem.choiceBody;\n        }\n        else {\n          this.choiceText = this.choiceText;\n        }\n        prevChoice = choiceItem.choiceBody;\n        n++;\n\n        if (i >= this.choices.length - 1) {\n          // handle last item\n          this.choiceText = this.choiceText +\n            (n === 2 ? ' ' + prevChoice + ' ' : (n > 2 ? ' - ' + prevChoice + ' ' : ''));\n        }\n      }\n      else {\n        if (prevChoice) {\n          // last item of a group\n          this.choiceText = this.choiceText +\n            (n === 2 ? ' ' + prevChoice + ' ' : (n > 2 ? ' - ' + prevChoice + ' ' : ''));\n        }\n        prevChoice = null;\n        n = 0;\n      }\n    }\n  }\n\n  /** \n   * Updates the value of the dropdown\n   * flag when the input becomes focused.\n   */\n  inputFocus() {\n    this.showDropdown ? this.showDropdown = false : this.showDropdown = true;\n  }\n\n  /** \n   * Updates the value of the dropdown\n   * flag when the input its hovered by a mouse.\n   */\n  inputMousedown() {\n    if (this.dropdownInputEl.hasFocus())\n      this.showDropdown ? this.showDropdown = false : this.showDropdown = true;\n  }\n\n  /** \n   * Updates the value of the dropdown\n   * flag when the input losses focus.\n   */\n  inputBlur() {\n    if (!this.dropdownSelected) {\n      this.timeoutBlur = setTimeout(() => {\n        this.showDropdown = false;\n      }, 300);\n    }\n  }\n\n  /** \n   * Callback that gets executed when a change on the input \n   * has been detected.\n   * \n   * @param fn - The output function defined on the dummy input\n   */\n  handleChangeFunction(fn) {\n    this.changed = fn;\n  }\n\n  /** \n   * Callback that gets executed when the input becomes \n   * focused (touched).\n   * \n   * @param fn - The output function defined on the dummy input\n   */\n  handleTouchFunction(fn) {\n    this.touched = fn;\n  }\n\n  /** \n   * Callback that gets executed when a value is written on the input.\n   * \n   * @param fn - The output function defined on the dummy input\n   */\n  handleWrite(value) {\n    console.log('handle write', value);\n  }\n\n  /** \n   * Updates the value of the dropdown flag when the input\n   * becomes focused for the first time.\n   */\n  itemTouchStart() {\n    this.dropdownSelected = true;\n  }\n}\n\n\n\n"]}