{"version":3,"names":[],"mappings":"","sources":["src/@ionic-clinical6/core/flow_process/flow_inputs/stepinput.component.d.ts"],"sourcesContent":["import { EventEmitter } from '@angular/core';\nimport { ChoiceState, InputState, InputStyle } from '../flow_inputs/input.model';\nimport { FormControl, FormGroup, AbstractControl } from '@angular/forms';\n/**\n * This class represents the base for all types of inputs,\n * provides properties for displaying attributes, adding validation rules\n * and custom error messages.\n *\n * Override any of the properties to customize.\n *\n * @example <caption> Typescript </caption>\n * import { StepInputTextComponent } from '@ionic-clinical6/core/flow_process/flow_inputs/stepinput.component';\n *\n * export class WeigthInput extends StepInputComponent {\n *\n *  public get hint(): string {\n *      return 'Enter your weight';\n *  }\n *\n *  doCustomWeightReading() {}\n *\n * }\n */\nexport declare class StepInputComponent {\n    /**\n     * @type {InputStyle} - Defines the style of the input, this definition its to be\n     * used on the template\n     */\n    InputStyle: typeof InputStyle;\n    /** @type {boolean} - Flag indicating if the input has lost user focus. */\n    focusOut: boolean;\n    /** @type {InputState} - Represents the input model of the FlowProcess step */\n    flowInput: InputState;\n    /** @type {string} - Represents the style of the input */\n    private inputStyle;\n    /** @type {string} - Represents the body of the input */\n    private inputBody;\n    /** @type {string} - Represents the title of the input */\n    private inputTitle;\n    /** @type {string} - Represents the instructions of the input */\n    private inputHint;\n    /** @type {Boolean} - Represents the status of the input (read only) */\n    private inputEnabled;\n    /** @type {any} - Represents the value of the input */\n    value: any;\n    /** @type {FormGroup} - The main FormGroup containing all inputs as FormControls */\n    subForm: FormGroup;\n    /** @type {string} - Represents the style of the label ('floating' or 'stacked') */\n    labelStyle: string;\n    /** @type {any} */\n    inputFilter: any;\n    goToPage: EventEmitter<{}>;\n    initInput(): void;\n    /**\n     * This method its used to retrieve an error message\n     * for when the input its not valid\n     *\n     * @return the error if the input its invalid, null otherwise\n     */\n    getError(): string;\n    /**\n     * @type {any} - Represents the minimum length required, mostly used with\n     * text inputs\n     */\n    readonly validationMin: any;\n    /**\n     * @type {any} - Represents the maximum length allowed, mostly used with\n     * text inputs\n     */\n    readonly validationMax: any;\n    /**\n     * @type {string} - Represents the body of the input.\n     */\n    readonly body: string;\n    /**\n     * @type {string} - Represents the hint of the input.\n     */\n    readonly title: string;\n    /**\n     * @type {string} - Represents the hint of the input.\n     */\n    readonly hint: string;\n    /**\n     * @type {string} - Represents the type of the input.\n     */\n    readonly type: string;\n    /**\n     * @type {string} - Represents the style of the input.\n     */\n    readonly style: string;\n    /**\n     * @type {string} - Represents the style of the input.\n     */\n    readonly filter: string;\n    /**\n     * @type {boolean} - Indicates if the input should not be editable.\n     */\n    readonly readOnly: boolean;\n    /**\n     * @type {ChoiceState} - Represents the body of the input, in most cases\n     * its not necessary to override\n     */\n    readonly choices: ChoiceState[];\n    /**\n     * @type {boolean} - Indicates if the input its required to have a value.\n     */\n    readonly required: boolean;\n    /**\n     * @type {any} - Represents the list of validators to be used for this input.\n     * If the input its not required we omit the validators.\n     */\n    readonly requiredValidators: any;\n    /**\n     * @type {any} - Represents the validators available for this input and\n     * its given style.\n     */\n    readonly validators: any;\n    /**\n     * @type {FormControl} - Represents the FormControl object of this input.\n     */\n    readonly inputControl: FormControl;\n    /**\n     * disabled attribute cannot be set dynamically anymore using reactive forms. It needs to use enable()/ disable()\n     * @type {AbstractControl} - Disables the specific FormControl.\n     */\n    disableInput(control: AbstractControl): void;\n    /**\n     * @type {AbstractControl} - Enables the specific FormControl\n     */\n    enableInput(control: AbstractControl): void;\n    /**\n     * @type {AbstractControl} - Sets a value on the specif FormControl.\n     */\n    setValue(control: AbstractControl, value: any): void;\n}\n"],"file":"stepinput.component.d.ts"}