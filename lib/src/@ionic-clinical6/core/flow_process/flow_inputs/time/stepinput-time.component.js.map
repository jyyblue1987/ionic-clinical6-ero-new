{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow_inputs/time/stepinput-time.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAS,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAEvE,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAC5D,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AAoBjC,IAAa,sBAAsB,GAAnC,4BAAqC,SAAQ,kBAAkB;IAlB/D;;QAmBE,gDAAgD;QAChD,kBAAa,GAAG,SAAS,CAAC;QAEhB,aAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QAuBxC,8BAA8B;QAC9B,yBAAyB;QACzB,8BAA8B;QAC9B,iEAAiE;QACjE,0CAA0C;QAC1C,MAAM;QACN,wBAAwB;QACxB,IAAI;QAEJ,oIAAoI;QACpI,gDAAgD;QAChD,gDAAgD;QAChD,kDAAkD;QAClD,IAAI;QAEJ,kBAAkB;QAClB,qBAAqB;QACrB,iEAAiE;QACjE,6CAA6C;QAC7C,MAAM;QACN,IAAI;IACN,CAAC;IAtCC,QAAQ;QACN,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAClC,6BAA6B;YAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC;QACvG,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7I,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;QACpF,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7I,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;QACpF,CAAC;IACH,CAAC;CAsBF,CAAA;AA5CW;IAAT,MAAM,EAAE;;wDAA+B;AAJ7B,sBAAsB;IAlBlC,SAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,QAAQ,EAAE;;;;;;;;;;;;;GAaT;KACF,CAAC;GAEW,sBAAsB,CAgDlC;SAhDY,sBAAsB","file":"stepinput-time.component.js","sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { StepInputComponent } from '../stepinput.component';\nimport * as moment from 'moment';\n\n@Component({\n  selector: 'stepinput-time',\n  templateUrl: './stepinput-time.component.html'\n})\n\nexport class StepInputTimeComponent  extends StepInputComponent {\n  // @Output() choiceChanged = new EventEmitter();\n  displayFormat = 'hh:mm A';\n  time: any;\n  @Output() formData = new EventEmitter();\n  focusOut: boolean;\n  // @Input() dateFormat: string;\n  minHour: any;\n  maxHour: any;\n\n  ngOnInit() {\n    if (this.flowInput['title']) {\n      let str = this.flowInput['title'];\n      // setting up the time format\n      this.displayFormat = this.body || str.substring(str.indexOf('(') + 1, str.indexOf(')')) || 'hh:mm A';\n    }\n    if (this.value !== '') {\n      this.time = this.value;\n    }\n\n    if (this.flowInput['validation_details'] && this.flowInput['validation_details'].max && this.displayFormat.toLowerCase().indexOf('a') === -1) {\n      this.maxHour = moment(this.flowInput['validation_details'].max, 'HH:mm').format();\n    }\n    if (this.flowInput['validation_details'] && this.flowInput['validation_details'].min && this.displayFormat.toLowerCase().indexOf('a') === -1) {\n      this.minHour = moment(this.flowInput['validation_details'].min, 'HH:mm').format();\n    }\n  }\n  // ngOnChanges(changes: any) {\n  //   if (changes.value) {\n  //     this.time = this.value;\n  //     let emitValue = this.time; // do we need to reformat time?\n  //     this.choiceChanged.emit(emitValue);\n  //   }\n  //   this.disableForm();\n  // }\n\n  // disableForm() { // disabled attribute cannot be set dynamically anymore using reactive forms. It needs to use enable()/ disable()\n  //   if (this.readonly || this.inputData.locked)\n  //     this.subForm.controls['input'].disable();\n  //   else this.subForm.controls['input'].enable();\n  // }\n\n  // timeChanged() {\n  //   if (this.time) {\n  //     let emitValue = this.time; // do we need to reformat time?\n  //     // this.choiceChanged.emit(emitValue);\n  //   }\n  // }\n}"]}