{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow_inputs/stepinput.component.ts"],"names":[],"mappings":"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","file":"stepinput.component.js","sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ChoiceState, InputState, InputStyle } from '../flow_inputs/input.model';\n\nimport { FlowInput } from 'clinical6';\n\nimport { FormControl, FormGroup, Validators, AbstractControl } from '@angular/forms';\n\nimport { InputValidationFactory } from './validation.factory';\nimport { ValidationService } from './validation.service';\n\n/**\n * This class represents the base for all types of inputs,\n * provides properties for displaying attributes, adding validation rules\n * and custom error messages.\n *\n * Override any of the properties to customize.\n * \n * @example <caption> Typescript </caption>\n * import { StepInputTextComponent } from '@ionic-clinical6/core/flow_process/flow_inputs/stepinput.component';\n *\n * export class WeigthInput extends StepInputComponent {\n *  \n *  public get hint(): string {\n *      return 'Enter your weight';\n *  }\n * \n *  doCustomWeightReading() {}\n * \n * }\n */\n@Component({\n    selector: 'stepinput',\n    templateUrl: 'stepinput.component.html',\n})\nexport class StepInputComponent {\n    /**\n     * @type {InputStyle} - Defines the style of the input, this definition its to be \n     * used on the template\n     */\n    public InputStyle = InputStyle;\n\n    /** @type {boolean} - Flag indicating if the input has lost user focus. */\n    public focusOut: boolean;\n\n    /** @type {InputState} - Represents the input model of the FlowProcess step */\n    @Input() public flowInput: InputState;\n\n    /** @type {string} - Represents the style of the input */\n    @Input() private inputStyle: string;\n\n    /** @type {string} - Represents the body of the input */\n    @Input() private inputBody: string;\n\n    /** @type {string} - Represents the title of the input */\n    @Input() private inputTitle: string;\n\n    /** @type {string} - Represents the instructions of the input */\n    @Input() private inputHint: string;\n\n    /** @type {Boolean} - Represents the status of the input (read only) */\n    @Input() private inputEnabled: Boolean;\n\n    /** @type {any} - Represents the value of the input */\n    @Input() value: any;\n\n    /** @type {FormGroup} - The main FormGroup containing all inputs as FormControls */\n    @Input('group') public subForm: FormGroup;\n\n    /** @type {string} - Represents the style of the label ('floating' or 'stacked') */\n    @Input() labelStyle: string;\n\n    /** @type {any} */\n    @Input() inputFilter: any;\n\n    @Output() goToPage = new EventEmitter();   // Action associated to the 'Back' button click\n\n    initInput() {\n\n    }\n\n    /**\n     * This method its used to retrieve an error message\n     * for when the input its not valid\n     *\n     * @return the error if the input its invalid, null otherwise\n     */\n    public getError() {\n        const formControl = this.inputControl;\n\n        if (!formControl.errors && !this.subForm.errors) { return null; }\n\n        console.log('control errors:')\n        console.log(formControl.errors);\n\n        console.log('control errors:')\n        console.log(formControl.errors);\n\n        for (const key in formControl.errors) {\n            let inputError = InputValidationFactory.getValidationError(key);\n            if (formControl.errors['required']) {\n                return `${this.style} input ${inputError}`;\n            } else {\n                return inputError;\n            }\n        }\n\n        for (const key in this.subForm.errors) {\n            let inputError = InputValidationFactory.getValidationError(key);\n            return inputError;\n        }\n    }\n\n    /**\n     * @type {any} - Represents the minimum length required, mostly used with\n     * text inputs\n     */\n    public get validationMin(): any {\n        return this.flowInput['validation_details'] ? this.flowInput['validation_details'].min : 1;\n    }\n\n    /**\n     * @type {any} - Represents the maximum length allowed, mostly used with\n     * text inputs\n     */\n    public get validationMax(): any {\n        return this.flowInput['validation_details'] ? this.flowInput['validation_details'].max : 999;\n    }\n\n    /**\n     * @type {string} - Represents the body of the input.\n     */\n    public get body(): string {\n        return this.inputBody ? this.inputBody : this.flowInput['body'];//this.flowInput.inputTitle;\n    }\n\n    /**\n     * @type {string} - Represents the hint of the input.\n     */\n    public get title(): string {\n        return this.inputTitle ? this.inputTitle : this.flowInput['title'];\n    }\n\n    /**\n     * @type {string} - Represents the hint of the input.\n     */\n    public get hint(): string {\n        return this.inputHint ? this.inputHint : this.flowInput['instructions'];//this.flowInput.inputSubtitle;\n    }\n\n    /**\n     * @type {string} - Represents the type of the input.\n     */\n    public get type(): string {\n        return this.flowInput.inputType;\n    }\n\n    /**\n     * @type {string} - Represents the style of the input.\n     */\n    public get style(): string {\n        return this.inputStyle ? this.inputStyle : this.flowInput.inputStyle;\n    }\n\n    /**\n     * @type {string} - Represents the style of the input.\n     */\n    public get filter(): string {\n        return this.inputFilter ? this.inputFilter : {};\n    }\n\n    /**\n     * @type {boolean} - Indicates if the input should not be editable.\n     */\n    public get readOnly(): boolean {\n        return this.inputEnabled ? !this.inputEnabled : (this.flowInput['locked']);\n    }\n\n    /**\n     * @type {ChoiceState} - Represents the body of the input, in most cases\n     * its not necessary to override\n     */\n    public get choices(): ChoiceState[] {\n        return this.flowInput.inputChoices ? this.flowInput.inputChoices : [];\n    }\n\n    /**\n     * @type {boolean} - Indicates if the input its required to have a value.\n     */\n    public get required(): boolean {\n        return this.flowInput['required'];\n    }\n\n    /**\n     * @type {any} - Represents the list of validators to be used for this input.\n     * If the input its not required we omit the validators.\n     */\n    public get requiredValidators(): any {\n        return this.required ? this.validators : [];\n    }\n\n    /**\n     * @type {any} - Represents the validators available for this input and\n     * its given style.\n     */\n    public get validators(): any {\n        if (InputValidationFactory.getValidatorRule(this.style)) {\n            return InputValidationFactory.getValidatorRule(this.style);\n        } else {\n            return [Validators.required];\n        }\n    }\n\n    /**\n     * @type {FormControl} - Represents the FormControl object of this input.\n     */\n    public get inputControl(): FormControl {\n        return this.subForm.get(`${this.flowInput.inputId}`) as FormControl;\n    }\n\n    /**\n     * disabled attribute cannot be set dynamically anymore using reactive forms. It needs to use enable()/ disable()\n     * @type {AbstractControl} - Disables the specific FormControl.\n     */\n    public disableInput(control: AbstractControl) { // disabled attribute cannot be set dynamically anymore using reactive forms. It needs to use enable()/ disable()\n        (control as AbstractControl) && control.disable();\n    }\n\n    /**\n     * @type {AbstractControl} - Enables the specific FormControl\n     */\n    public enableInput(control: AbstractControl) {\n        (control as AbstractControl) && control.enable();\n    }\n\n    /**\n     * @type {AbstractControl} - Sets a value on the specif FormControl.\n     */\n    public setValue(control: AbstractControl, value: any) {\n        (control as AbstractControl) && control.setValue(value);\n    }\n}"]}