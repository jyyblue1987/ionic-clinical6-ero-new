{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow_inputs/input-container.component.ts"],"names":[],"mappings":"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","file":"input-container.component.js","sourcesContent":["import { Component, Input, Output, EventEmitter, ViewChild, ComponentFactoryResolver } from '@angular/core';\nimport { InputState, InputStyle } from './input.model';\nimport { Validators, FormBuilder, FormArray, FormGroup, FormControl } from '@angular/forms';\nimport { ValidationService } from './validation.service';\nimport { StepInputDirective } from './stepinput.directive';\nimport { StepInputFactory } from './stepinput.factory';\n\nimport { StepInputComponent } from './stepinput.component';\n\n@Component({\n  selector: 'input-container',\n  templateUrl: 'input-container.component.html'\n})\n/**\n * Represents a component that contains all of the inputs for a given step.\n *\n * This class sets up the main FormGroup object, and handles updates to the form\n * status and values.\n * \n * @example <caption>html template</caption>\n * <input-container \n *     [inputList]=\"inputs\" \n *     [fields]=\"fields\" \n *     [filter]=\"filter\" \n *     [readonly]=\"!editing\" \n *     (formValueChanged)=\"updateControlValue($event)\"\n *     (formStatusChanged)=\"updateFormStatus($event)\" \n *     (goToPage)=\"goToPage($event)\">\n *</input-container>\n */\nexport class InputContainerComponent {\n  /** \n   * @type {InputStyle} - Defines the style of the input, this definition its to be\n   * used on the template\n   */\n  public InputStyle = InputStyle;\n\n  /** @type {any} - The list of saved values for the flow step, if present */\n  @Input() fields: any;\n\n  /** @type {InputState[]} - The list of inputs contained in the flow step */\n  @Input() inputList: InputState[];\n\n  /** @type {boolean} - Indicates if the input its editable */\n  @Input() readonly: boolean;\n\n  /** @type {any} */\n  @Input() filter: any;\n\n  /** @type {any} - Represents the step model for the active Flow Step */\n  @Input() step: any;\n\n  /** @type {string} - A global style the input hints */\n  @Input() labelStyle: string;\n\n  /** @type {EventEmmitter} - Callback to tell the FlowStep (or any class using this)\n   *  the Form has changed status */\n  @Output() formStatusChanged = new EventEmitter();\n\n  /** @type {EventEmmiter} - Callback to tell the FlowStep (or any class using this) the Form has changed value */\n  @Output() formValueChanged = new EventEmitter();\n\n  /** @type {EventEmmiter} - Callback to tell the FlowStep which path to take */\n  @Output() goToPage = new EventEmitter();\n\n  /** @type {FormGroup} - The main form containing the inputs (as form controls),\n   *  this is the form used for input validation\n   */\n  mainForm: FormGroup;\n\n  /** @type {StepInputDirective} - Represents the directive used in the container\n   * template to dinamically add inputs as necessary */\n  @ViewChild(StepInputDirective) inputDirective: StepInputDirective;\n\n  constructor(\n    public formBuilder: FormBuilder) { }\n\n  /** Angular lifecycle callback. */\n  ngOnInit() {\n    console.log('InputContainer initialized');\n\n    this.mainForm = this.formBuilder.group({});\n    this.mainForm.statusChanges.subscribe(status => {\n      this.formStatusChanged.emit(this.mainForm.valid);\n    });\n\n    if (!this.inputList || this.inputList.length === 0) {\n      // If there are no inputs to validate, the form its valid by default\n      this.formStatusChanged.emit(true);\n    }\n\n    let self = this;\n    // Everytime a value on the form changes we update the \n    // flow input values (avoiding sending too much calls)\n    this.mainForm.valueChanges\n      .debounceTime(300)\n      .subscribe((value) => {\n        for (let inputId in value) {\n          let inputValue = value[inputId];\n          this.formValueChanged.emit({ id: inputId, value: inputValue });\n\n          console.log(`step values id: ${inputId} value: ${inputValue}`);\n        }\n      });\n    console.log('FormGroup initialized');\n\n  }\n\n  // This warns the parent if the mainForm is valid\n  ngAfterViewInit() {\n    // Component views are initialized\n    /* if (this.mainForm) {\n      this.formValidate.emit(this.mainForm.controls['formArray'].valid);\n    } */\n  }\n\n  rgb2hex(rgb: any) {\n    rgb = rgb.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n    return (rgb && rgb.length === 4) ? '#' +\n      ('0' + parseInt(rgb[1], 10).toString(16)).slice(-2) +\n      ('0' + parseInt(rgb[2], 10).toString(16)).slice(-2) +\n      ('0' + parseInt(rgb[3], 10).toString(16)).slice(-2) : '';\n  }\n\n  forwardGoToPage(event) {\n    this.goToPage.emit(event);\n  } \n\n}"]}