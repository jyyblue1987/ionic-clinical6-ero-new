{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow_inputs/validation.factory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAEzD;;;;;;;;;;;;GAYG;AACH,MAAM;IAEF;;;;;OAKG;IACI,MAAM,CAAC,gBAAgB,CAAC,KAAa,EAAE,UAAe;QACzD,sBAAsB,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC;IAC9D,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,gBAAgB,CAAC,KAAa;QACxC,MAAM,CAAC,sBAAsB,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACxD,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,kBAAkB,CAAC,SAAiB,EAAE,YAAoB;QACpE,sBAAsB,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC;IACjE,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,kBAAkB,CAAC,SAAiB;QAC9C,MAAM,CAAC,sBAAsB,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACzD,CAAC;;AAEc,qCAAc,GAA6B;IACtD,QAAQ,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IAC/B,KAAK,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC;IAC9C,KAAK,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IAC5B,QAAQ,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IAC/B,YAAY,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,iBAAiB,CAAC,cAAc,CAAC;IACrE,YAAY,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IACnC,IAAI,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,iBAAiB,CAAC,qBAAqB,CAAC;IACpE,QAAQ,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,iBAAiB,CAAC,gBAAgB,CAAC;CACtE,CAAC;AAEa,kCAAW,GAAgC;IACtD,KAAK,EAAE,wBAAwB;IAC/B,QAAQ,EAAE,cAAc;CAC3B,CAAC","file":"validation.factory.js","sourcesContent":["import { Validators } from '@angular/forms';\nimport { ValidationService } from './validation.service';\n\n/**\n * Helper class that holds all predefined validator rules\n * for the basic types of inputs and the error messages to show\n * the user when an input its invalid\n *\n * Use the helper methods to add or override input validators and\n * input error messages\n * \n * @example\n *  import { Validators } from '@angular/forms';\n *\n *  InputValidationFactory.setValidatorRule('password',[Validators.required, Validators.minLength(8)])\n */\nexport class InputValidationFactory {\n\n    /**\n     * Adds or overrides a set of validators for the given input style\n     *\n     * @param style the style of input for the validator\n     * @param validators the array of desired validators\n     */\n    public static setValidatorRule(style: string, validators: any) {\n        InputValidationFactory.validatorRules[style] = validators;\n    }\n\n    /**\n     * Returns the set of validation rules assigned to the given style\n     *\n     * @param style the desired style of input\n     */\n    public static getValidatorRule(style: string) {\n        return InputValidationFactory.validatorRules[style];\n    }\n\n    /**\n     * Adds or overrides an error message for the given type of error.\n     *\n     * @param errorType the type of error on the input\n     * @param errorMessage the message to show when the given error its present\n     */\n    public static setValidationError(errorType: string, errorMessage: string) {\n        InputValidationFactory.inputErrors[errorType] = errorMessage;\n    }\n\n    /**\n     * Returns the error message for the given error type.\n     *\n     * @param errorType the error type\n     */\n    public static getValidationError(errorType: string) {\n        return InputValidationFactory.inputErrors[errorType];\n    }\n\n    private static validatorRules: { [style: string]: any } = {\n        checkbox: [Validators.required],\n        email: [Validators.required, Validators.email],\n        other: [Validators.required],\n        password: [Validators.required],\n        phone_number: [Validators.required, ValidationService.phoneValidator],\n        radio_button: [Validators.required],\n        text: [Validators.required, ValidationService.noWhitespaceValidator],\n        zip_code: [Validators.required, ValidationService.zipCodeValidator],\n    };\n\n    private static inputErrors: { [style: string]: string } = {\n        email: 'Incorrect email format',\n        required: ' is required',\n    };\n}\n"]}