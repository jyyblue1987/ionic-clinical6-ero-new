{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow_inputs/input.model.ts"],"names":[],"mappings":"AAGA;;GAEG;AACH,MAAM;;AACG,qBAAU,GAAG,eAAe,CAAC;AAC7B,uBAAY,GAAG,eAAe,CAAC;AAC/B,mBAAQ,GAAG,UAAU,CAAC;AACtB,gBAAK,GAAG,QAAQ,CAAC;AACjB,sBAAW,GAAG,cAAc,CAAC;AAC7B,oBAAS,GAAG,WAAW,CAAC;AACxB,gBAAK,GAAG,OAAO,CAAC;AAChB,kBAAO,GAAG,UAAU,CAAC;AACrB,eAAI,GAAG,MAAM,CAAC;AACd,mBAAQ,GAAG,WAAW,CAAC;AACvB,oBAAS,GAAG,YAAY,CAAC;AACzB,mBAAQ,GAAG,UAAU,CAAC;AACtB,sBAAW,GAAG,cAAc,CAAC;AAC7B,kBAAO,GAAG,UAAU,CAAC;AACrB,mBAAQ,GAAG,UAAU,CAAC;AACtB,gBAAK,GAAG,OAAO,CAAC;AAChB,gBAAK,GAAG,OAAO,CAAC;AAChB,kBAAO,GAAG,SAAS,CAAC;AACpB,mBAAQ,GAAG,UAAU,CAAC;AAG/B;;;GAGG;AACH,MAAM;IACG,MAAM,CAAC,QAAQ,CAAC,KAAa;QAClC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACd,KAAK,WAAW,CAAC;YACjB,KAAK,OAAO,CAAC;YACb,KAAK,MAAM,CAAC;YACZ,KAAK,WAAW,CAAC;YACjB,KAAK,YAAY,CAAC;YAClB,KAAK,QAAQ;gBACX,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC;YAC9B,KAAK,UAAU;gBACb,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC7B,KAAK,eAAe;gBAClB,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC;YACjC,KAAK,UAAU;gBACb,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC;YAC5B,KAAK,MAAM;gBACT,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;YACzB,KAAK,WAAW;gBACd,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC7B,KAAK,YAAY;gBACf,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC;YAC9B,KAAK,UAAU;gBACb,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC7B,KAAK,cAAc;gBACjB,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;YAChC,KAAK,UAAU;gBACb,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC;YAC5B,KAAK,UAAU;gBACb,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC7B,KAAK,OAAO;gBACV,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;YAC1B,KAAK,SAAS;gBACZ,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC;YAC5B,KAAK,UAAU;gBACb,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC7B;gBACE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;QAC5B,CAAC;IACH,CAAC;CACF","file":"input.model.js","sourcesContent":["import { Input, Output, EventEmitter } from '@angular/core';\nimport { NavParams } from 'ionic-angular';\n\n/**\n * Style used to display an input choices\n */\nexport class InputStyle {\n  static checkBoxes = 'radio_buttons';\n  static radioButtons = 'radio_buttons';\n  static dropdown = 'dropdown';\n  static yesNo = 'yes_no';\n  static siteAddress = 'site_address';\n  static attribute = 'attribute';\n  static roles = 'roles';\n  static zipCode = 'zip_code';\n  static text = 'text';\n  static textArea = 'text_area';\n  static patientId = 'patient_id';\n  static password = 'password';\n  static phoneNumber = 'phone_number';\n  static textBox = 'text_box';\n  static currency = 'currency';\n  static email = 'email';\n  static other = 'other';\n  static spinner = 'spinner';\n  static location = 'location';\n}\n\n/**\n * Helper class that takes a string and\n * returns a supported type of input style\n */\nexport class InputStyleUtil {\n  public static getStyle(style: string): InputStyle {\n    switch (style) {\n      case 'attribute':\n      case 'phone':\n      case 'role':\n      case 'last_name':\n      case 'first_name':\n      case 'prefix':\n        return InputStyle.attribute;\n      case 'dropdown':\n        return InputStyle.dropdown;\n      case 'radio_buttons':\n        return InputStyle.radioButtons;\n      case 'zip_code':\n        return InputStyle.zipCode;\n      case 'text':\n        return InputStyle.text;\n      case 'text_area':\n        return InputStyle.textArea;\n      case 'patient_id':\n        return InputStyle.patientId;\n      case 'password':\n        return InputStyle.password;\n      case 'phone_number':\n        return InputStyle.phoneNumber;\n      case 'text_box':\n        return InputStyle.textBox;\n      case 'currency':\n        return InputStyle.currency;\n      case 'email':\n        return InputStyle.email;\n      case 'spinner':\n        return InputStyle.spinner;\n      case 'location' :\n        return InputStyle.location;\n      default:\n        return InputStyle.other;\n    }\n  }\n}\n\n/**\n * Represents an input\n */\nexport interface InputState {\n  inputId: number;\n  inputType: string;\n  inputStyle: string;\n  inputTitle: string;\n  inputSubtitle: string;\n  inputEnabled: boolean;\n  inputRequired: boolean;\n  inputChoices: ChoiceState[];\n}\n\n/**\n * Represents a single choice\n * that belongs to an input\n */\nexport interface ChoiceState {\n  choiceId: number;\n  choiceBody: string;\n  choiceSelected: boolean;\n}"]}