{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow_inputs/date/stepinput-date.component.ts"],"names":[],"mappings":"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","file":"stepinput-date.component.js","sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport * as moment from 'moment';\nimport { StepInputComponent } from '../stepinput.component';\n\n/**\n * This class represents an input of type date.\n * \n * The value its the date the user selected in the input.\n */\n@Component({\n  selector: 'stepinput-date',\n  templateUrl: './stepinput-date.component.html'\n})\n\nexport class StepInputDateComponent extends StepInputComponent {\n\n  /** @type {string} - The format in which the date is displayes */\n  displayFormat = 'DD/MMMM/YYYY';\n\n  /** @type {any} - The selected date */\n  date: any;\n\n  /** @type {boolean} - Flag indicating if the input has user focus */\n  focusOut: boolean;\n\n  /** @type {string} - Default min and max date values */\n  minDate = '1917';\n  maxDate = '2025';\n\n  /** Angular lifecycle callback to calculate the displayFormat, the pickerFormat, the minDate and the maxDate to use in the ion-datetime picker */\n  ngOnInit() {\n    if (this.flowInput['title']) {\n      let str = this.flowInput['title'];\n      this.displayFormat = this.body || str.substring(str.indexOf('(') + 1, str.indexOf(')')) || 'DD/MMMM/YYYY';\n    }\n    if (this.value !== '') {\n      this.date = this.value;\n    }\n    if (this.flowInput['validation_details'] && this.flowInput['validation_details'].max) {\n      this.maxDate = this.getRelativeDate(this.flowInput['validation_details'].max);\n    }\n    if (this.flowInput['validation_details'] && this.flowInput['validation_details'].min) {\n      this.minDate = this.getRelativeDate(this.flowInput['validation_details'].min);\n    }\n  }\n\n  /** TODO: Need details */\n  getRelativeDate(relative: any) {\n    if (relative === 'current') {\n      return (new Date).toISOString();\n    }\n    let date = moment();\n\n    // test string format\n    var res = /-(\\d+)\\s*years/.exec(relative);\n    if (res && res.length > 0) relative = { subtract: { year: res[1] } };\n\n    if (relative.subtract) {\n      var momentOptions = {\n        years: relative.subtract.year || 0,\n        months: relative.subtract.month || 0,\n        days: relative.subtract.day || 0,\n      };\n      date.subtract(momentOptions);\n    } else if (relative.add) {\n      var momentOptions = {\n        years: relative.add.year || 0,\n        months: relative.add.month || 0,\n        days: relative.add.day || 0,\n      };\n      date.add(momentOptions);\n    }\n\n    return date.toISOString();\n  }\n}"]}