{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow_inputs/pipes/address.pipe.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,IAAI,EAAiB,MAAM,eAAe,CAAC;AACpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BE;AAGF,IAAa,gBAAgB,GAA7B;IAEE;;;;;;;;;;;;;;;;QAgBI;IACJ,SAAS,CAAG,OAAY;QACtB,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QACtF,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACtG,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACtG,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACtG,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QACrF,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QACpF,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;QACzF,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;QACxF,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED,OAAO,CAAC,SAAkB,EAAE,CAAS,EAAE,CAAS;QAC9C,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACX,EAAE,CAAC,CAAC,SAAS,CAAC;gBAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;YAC5B,MAAM,CAAC,CAAC,CAAC;QACb,CAAC;QACD,IAAI;YAAC,MAAM,CAAC,EAAE,CAAC;IACjB,CAAC;CAmDF,CAAA;AAzFY,gBAAgB;IAD5B,IAAI,CAAC,EAAC,IAAI,EAAE,cAAc,EAAC,CAAC;GAChB,gBAAgB,CAyF5B;SAzFY,gBAAgB","file":"address.pipe.js","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n/*\n * Pretty print address\n * Takes an exponent argument that address object\n * Usage:\n *   address | addressPrint\n * Example:\n  \n    { {\n        'id': 2,\n        'email': '',\n        'phone_number': '',\n        'category': 'mailing',\n        'title': 'Secondary Address',\n        'city': 'San Diego',\n        'state': 'CA',\n        'country': 'US',\n        'zip_code': '92037',\n        'latitude': null,\n        'longitude': null,\n        'street': '777 Fantasy Rd.',\n        'address_line_2': 'Suite 650',\n        'address_line_3': '' \n        } | addressPrint \n    }\n\n    formats to: \n    777 Fantasy Rd., Suite 650, San Diego, CA 92037, US\n *\n *\n*/\n\n@Pipe({name: 'addressPrint'})\nexport class AddressPrintPipe implements PipeTransform {\n\n  /* assumes a data structure like this:\n  {\n    'id': 2,\n    'email': '',\n    'phone_number': '',\n    'category': 'mailing',\n    'title': 'Secondary Address',\n    'city': 'San Diego',\n    'state': 'CA',\n    'country': 'US',\n    'zip_code': '92037',\n    'latitude': null,\n    'longitude': null,\n    'street': '777 Fantasy Rd.',\n    'address_line_2': 'Suite 650',\n    'address_line_3': ''\n  } */\n  transform ( address: any ): string {\n    let result = '';\n    if (address['street']) result += this.addItem(result !== '', ', ', address['street']);\n    if (address['address_line_1']) result += this.addItem(result !== '', ', ', address['address_line_1']);\n    if (address['address_line_2']) result += this.addItem(result !== '', ', ', address['address_line_2']);\n    if (address['address_line_3']) result += this.addItem(result !== '', ', ', address['address_line_3']);\n    if (address['city']) result += this.addItem(result !== '', ',<br>', address['city']);\n    if (address['state']) result += this.addItem(result !== '', ', ', address['state']);\n    if (address['zip_code']) result += this.addItem(result !== '', ' ', address['zip_code']);\n    if (address['country']) result += this.addItem(result !== '', ', ', address['country']);\n    return result;\n  }\n\n  addItem(condition: boolean, a: string, b: string) {\n    if (b !== '') {\n        if (condition) return a + b;\n        return b;\n    }\n    else return '';\n  }\n\n  /* assumes a data structure like this:\n  {\n        address1: {\n            value: '7777 Fantasy Avenue',\n            description: 'Site Address 1 (Street Address)'\n        },\n        address2: {\n            value: 'Building Yellow',\n            description: 'Site Address 2 (Building/Department)'\n        },\n        address3: {\n            value: 'Suite 123',\n            description: 'Site Address 3 (Suite/Unit Number)'\n        },\n        city: {\n            value: 'San Diego',\n            description: 'City'\n        },\n        state: {\n            value: 'CA',\n            description: 'State'\n        },\n        zip: {\n            value: '92037',\n            description: 'Postal Code'\n        },\n        country: {\n            value: 'USA',\n            description: 'Country'\n        }\n    }\n\n  transform ( address: any ): string {\n    let result = '';\n    for (let itemKey in address ) {\n        if (address[itemKey].value && address[itemKey].value !== '') {\n            if (result !== '') {\n                if (itemKey === 'zip')\n                    result = result + ' ';\n                else if (itemKey === 'city')\n                    result = result + '<br>';\n                else\n                    result = result + ', ';\n            }\n            result = result + address[itemKey].value;\n        } \n        result = result + address[itemKey];\n    }*/\n\n}\n"]}