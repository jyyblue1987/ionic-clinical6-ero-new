{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow_inputs/dummy/stepinput-dummy.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,YAAY,EAAU,MAAM,EAAE,MAAM,eAAe,CAAC;AACpF,OAAO,EAAwB,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AAGzE,MAAM,sBAAsB,GAAG;IAC3B,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,MAAM,uBAAuB,CAAC;IACtD,KAAK,EAAE,IAAI;CACd,CAAC;AA0BF,IAAa,uBAAuB;AAhBpC;;;;;;;;;;;;;;;GAeG;AACH;IAWI,kBAAkB;IAClB;QAVA,8FAA8F;QACpF,iBAAY,GAAsB,IAAI,YAAY,EAAE,CAAC;QAE/D,2FAA2F;QACjF,qBAAgB,GAAsB,IAAI,YAAY,EAAE,CAAC;QAEnE,gGAAgG;QACtF,sBAAiB,GAAsB,IAAI,YAAY,EAAE,CAAC;IAGpD,CAAC;IAEjB,uBAAuB;IACvB,QAAQ;IACR,CAAC;IAED;;OAEG;IACH,gBAAgB,CAAC,EAAE;QACf,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,iBAAiB,CAAC,EAAE;QAChB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,KAAK;QACZ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;CAEJ,CAAA;AApCa;IAAT,MAAM,EAAE;8BAAe,YAAY;6DAA2B;AAGrD;IAAT,MAAM,EAAE;8BAAmB,YAAY;iEAA2B;AAGzD;IAAT,MAAM,EAAE;8BAAoB,YAAY;kEAA2B;AAT3D,uBAAuB;IAxBnC,SAAS,CAAC;QACP,SAAS,EAAE,CAAC,sBAAsB,CAAC;QACnC,QAAQ,EAAE,aAAa;QACvB,QAAQ,EAAE;;KAET;KACJ,CAAC;IAEF;;;;;;;;;;;;;;;OAeG;;;GACU,uBAAuB,CAuCnC;SAvCY,uBAAuB","file":"stepinput-dummy.component.js","sourcesContent":["import { forwardRef, Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n\nconst DUMMY_CONTROL_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => StepInputDummyComponent),\n    multi: true\n};\n\n@Component({\n    providers: [DUMMY_CONTROL_ACCESSOR],\n    selector: 'dummy-input',\n    templateUrl: './stepinput-dummy.component.html'\n})\n\n/**\n * This class represents a placeholder input, use this to provide FormControl functionality\n * to a custom element.\n *\n * Use this element as the FormControl for your Form and provide the values manually\n * via the callback properties.\n * \n * @example \n * <dummy-input \n *  [formControlName]=\"inputId\" \n *  (onChangeFunction)=\"myChangeFunction($event)\" \n *  (onTouchedFunction)=\"myTouchFunction($event)\"\n *  (writtenValue)=\"myWriteFunction($event)\"\n * >\n * </dummy-input>\n */\nexport class StepInputDummyComponent implements ControlValueAccessor, OnInit {\n\n    /** @type {EventEmmiter} - Callback function, executed when a value is written on the input */\n    @Output() writtenValue: EventEmitter<any> = new EventEmitter();\n\n    /** @type {EventEmmiter} - Callback function, executed a change is detected on the input */\n    @Output() onChangeFunction: EventEmitter<any> = new EventEmitter();\n\n    /** @type {EventEmmiter} - Callback function, executed the input its touched (received focus) */\n    @Output() onTouchedFunction: EventEmitter<any> = new EventEmitter();\n\n    /** Constructor */\n    constructor() { }\n\n    /** Lifecycle method */\n    ngOnInit() {\n    }\n\n    /** Angular Callback, executed when a change on the control is detected.\n     *  Here we call the custom output property.\n     */\n    registerOnChange(fn) {\n        this.onChangeFunction.emit(fn);\n    }\n\n    /** Angular Callback, executed when the control is touched.\n     *  Here we call the custom output property.\n     */\n    registerOnTouched(fn) {\n        this.onTouchedFunction.emit(fn);\n    }\n\n    /** Angular Callback, executed when a change on the control's value is detected.\n     *  Here we call the custom output property.\n     */\n    writeValue(value) {\n        this.writtenValue.emit(value);\n    }\n\n}"]}