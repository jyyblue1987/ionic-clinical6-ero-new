{"version":3,"names":[],"mappings":"","sources":["src/@ionic-clinical6/core/flow_process/flow_inputs/stepinput.directive.d.ts"],"sourcesContent":["import { ViewContainerRef, EventEmitter, ComponentFactoryResolver } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { InputState } from './input.model';\n/**\n * This Directive provides a dynamic way to create InputContainers,\n * it dinamically instantiates inputs using the {@link StepInputFactory}\n * with the given input type\n *\n * Most of the times you won't need to use this directive, as its internally\n * used by the input container. Standalone use is still available.\n *\n * @example\n * <ng-template step-input *ngFor=\"let input of inputList; let index = index\"\n * [input]=\"input\"\n * [value]=\"(fields && fields[input.inputId]) || ''\"\n * [group]=\"mainForm\">\n * </ng-template>\n */\nexport declare class StepInputDirective {\n    viewContainerRef: ViewContainerRef;\n    private componentFactoryResolver;\n    /** @type {string} - Represents the style of the label ('floating' or 'stacked') */\n    labelStyle: string;\n    /** @type {InputState} - Represents the input model of the FlowProcess step */\n    input: InputState;\n    /** @type {any} - Represents the value of the input */\n    value: any;\n    /** @type {FormGroup} - The main FormGroup containing all inputs as FormControls */\n    mainForm: FormGroup;\n    /** @type {any} */\n    filter: any;\n    goToPage: EventEmitter<{}>;\n    inputCodeMap: {\n        [key: string]: string;\n    };\n    constructor(viewContainerRef: ViewContainerRef, componentFactoryResolver: ComponentFactoryResolver);\n    /** Angular lifecycle callback. */\n    ngOnInit(): void;\n}\n"],"file":"stepinput.directive.d.ts"}