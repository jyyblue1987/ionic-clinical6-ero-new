{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow_inputs/text/stepinput-text.component.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,EAA2C,MAAM,eAAe,CAAC;AAEnF,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAClD,OAAO,EAAa,UAAU,EAAe,MAAM,gBAAgB,CAAC;AACpE,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAI1D,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAC5D,OAAO,EAAE,sBAAsB,EAAE,MAAM,uBAAuB,CAAC;AAE/D;;;;GAIG;AAqEH,IAAa,sBAAsB,GAAnC,4BAAoC,SAAQ,kBAAkB;IAzE9D;;;;OAIG;IACH;;QAsEE,oDAAoD;QACpD,aAAQ,GAAa,IAAI,QAAQ,EAAE,CAAC;IAqEtC,CAAC;IAnEC,kCAAkC;IAClC,QAAQ;QACN,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;IAEnD,CAAC;IAED,SAAS;QACP,IAAI,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7D,sBAAsB,CAAC,gBAAgB,CAAC,OAAO,EAC7C,CAAC,UAAU,CAAC,QAAQ;YACpB,UAAU,CAAC,KAAK;YAChB,iBAAiB,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAEhD,sBAAsB,CAAC,gBAAgB,CAAC,UAAU,EAChD,CAAC,UAAU,CAAC,QAAQ;YACpB,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC;YACxC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAC1C,CAAA;QAED,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAA;IAC7C,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,QAAgB;QAC9B,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED;;;;OAIG;IACH,iBAAiB,CAAC,QAAgB;QAChC,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CAAC,QAAa;QAC/B,MAAM,CAAC,iBAAiB,CAAC,aAAa,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACH,eAAe;QACb,MAAM,CAAC,iBAAiB,CAAC,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3F,CAAC;IAED,IAAW,UAAU;QACnB,EAAE,CAAC,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7D,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC;CAEF,CAAA;AAxEY,sBAAsB;IApElC,SAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+DT;KACF,CAAC;GAEW,sBAAsB,CAwElC;SAxEY,sBAAsB","file":"stepinput-text.component.js","sourcesContent":["import { Component, Input, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { Platform } from 'ionic-angular';\nimport { Keyboard } from '@ionic-native/keyboard';\nimport { FormGroup, Validators, ValidatorFn } from '@angular/forms';\nimport { ValidationService } from '../validation.service';\nimport { BasePage } from '../../../pages/base/base-page';\n\nimport { InputStyle } from '../input.model';\nimport { StepInputComponent } from '../stepinput.component';\nimport { InputValidationFactory } from '../validation.factory';\n\n/**\n * This class represents an input of type text.\n * \n * The value its text entered by the user.\n */\n@Component({\n  selector: 'stepinput-text',\n  templateUrl: './stepinput-text.component.html'\n})\n\nexport class StepInputTextComponent extends StepInputComponent {\n\n  /** @type {Keyboard} - Native keyboard instance.  */\n  keyboard: Keyboard = new Keyboard();\n\n  /** Angular lifecycle callback. */\n  ngOnInit() {\n    this.keyboard.hideKeyboardAccessoryBar(false);\n    this.readOnly && (this.focusOut = this.readOnly);\n\n  }\n\n  initInput() {\n    let codeValue = localStorage.getItem(this.flowInput['code']);\n    InputValidationFactory.setValidatorRule('email',\n      [Validators.required,\n      Validators.email,\n      ValidationService.codeValidation(codeValue)]);\n\n    InputValidationFactory.setValidatorRule('password',\n      [Validators.required,\n      Validators.minLength(this.validationMin),\n      Validators.maxLength(this.validationMax)]\n    )\n\n    console.log(ValidationService.inputCodeMap)\n  }\n\n  /**\n   * @param rawValue - The unvalidated/unformatted string of text.\n   * \n   * @return - A string with a phone number format.\n   */\n  createPhoneMask(rawValue: string) {\n    return ValidationService.phoneMask(rawValue);\n  }\n\n  /**\n   * @param rawValue - The unvalidated/unformatted string of text.\n   * \n   * @return - A string with a zip code format.\n   */\n  createZipCodeMask(rawValue: string) {\n    return ValidationService.zipCodeMask(rawValue);\n  }\n\n  /**\n   * @param rawValue - The unvalidated/unformatted string of text.\n   * \n   * @return - A string with a patient id format.\n   */\n  createPatientIdMask(rawValue: any) {\n    return ValidationService.maskPatientId;\n  }\n\n  /**\n   * @param rawValue - The unvalidated/unformatted string of text.\n   * \n   * @return - A string with a password4 format.\n   */\n  getPasswordMask() {\n    return ValidationService.passwordMask('numeric', this.validationMin, this.validationMax);\n  }\n\n  public get validators(): any {\n    if (InputValidationFactory.getValidatorRule(this.style)) {\n      return InputValidationFactory.getValidatorRule(this.style);\n    } else {\n      return [Validators.required];\n    }\n  }\n\n}"]}