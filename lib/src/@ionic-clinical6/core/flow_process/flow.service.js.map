{"version":3,"sources":["../src/@ionic-clinical6/core/flow_process/flow.service.ts"],"names":[],"mappings":"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","file":"flow.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AppConfig } from '../config/app.config';\nimport { NavController } from 'ionic-angular';\nimport { FlowStep } from 'clinical6';\n\nimport { Flows } from './flow-factory';\n\n@Injectable()\nexport class FlowService {\n\n  _navCtrl: NavController;\n  _stepsStack: Array<{ navIndex: number, stepId: number }> = [];\n  _currentStepID: number;\n  _currentFlowID: number;\n\n  // The following helps handling the progress bar\n  // the flow step page is responsible to manage their values\n  _progress_total_steps: number;\n  _progress_current_step: number;\n\n  constructor() {\n      console.log('flowstep service');\n  }\n\n  setNav(nav: NavController) {\n    this._navCtrl = nav;\n  }\n\n   goToStep(step: FlowStep, options: any) {\n    // update the current progress bar index\n    if (step['progress_bar'] && this._progress_current_step < this._progress_total_steps)\n      this._progress_current_step++;\n    // Resets current steps stack and flow in case of new flow.\n    if (step.flow.id !== this._currentFlowID) this.resetStack(step);\n\n    // look for circular references\n    let existingIdx = this._stepsStack.findIndex( el => { return (el.stepId === step.id); });\n\n    // Push OR remove\n    if (existingIdx >= 0) {\n      // console.log('goToStep removing and existing step ', step);\n      this._navCtrl.remove(this._stepsStack[existingIdx].navIndex + 1, this._navCtrl.length() - (this._stepsStack[existingIdx].navIndex + 1), AppConfig.animationOpt );\n      this._stepsStack.splice(existingIdx + 1, this._stepsStack.length - (existingIdx + 1));\n    }\n    else {\n      // console.log('goToStep going to the following step ', step);\n      this._stepsStack.push({navIndex: this._navCtrl.length(), stepId: step.id});\n      this._navCtrl.push( Flows.Factory(step), options, AppConfig.animationOpt );\n    }\n\n    // // remove unneeded steps=\n    // if (existingIdx >= 0) {\n    //   nav.remove(this._stepsStack[existingIdx].navIndex + 1, nav.length() - (this._stepsStack[existingIdx].navIndex + 1) );\n    //   this._stepsStack.splice(existingIdx + 1, this._stepsStack.length - (existingIdx + 1));\n    // }\n    // else {\n    //   this._stepsStack.push({navIndex: nav.length(), stepId: step.id});\n    //   nav.push( Flows.Factory(step.content_type, step), options );\n    // }\n  }\n  resetStack(step?: FlowStep) {\n    this._stepsStack.splice(0, this._stepsStack.length);\n    this._stepsStack.length = 0;\n    if (step) {\n      this._currentFlowID = step.flow.id;\n      this._currentStepID = step.id;\n    }\n  }\n\n  // helper method to prepare the progress bar\n  setProgressBar(step: FlowStep) {\n    if (step && step.flow.steps) {\n      this._progress_total_steps = step.flow.steps.reduce( (total, el) => el['progress_bar'] ? total + 1 : total, 0);\n      this._progress_current_step = 0;\n    }\n  }\n\n}"]}