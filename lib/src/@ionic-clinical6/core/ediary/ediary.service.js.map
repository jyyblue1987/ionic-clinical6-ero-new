{"version":3,"sources":["../src/@ionic-clinical6/core/ediary/ediary.service.ts"],"names":[],"mappings":"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","file":"ediary.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { clinical6, User, flowService, Flow, eDiaryService, Client, Entry, StorageUtility } from 'clinical6';\nimport * as moment from 'moment';\nimport { Flows } from '../';\nimport { isArray } from 'ionic-angular/util/util';\n\n@Injectable()\nexport class EdiaryIonicService {\n\n  profile;\n  mobileUser: User;\n  // entryGroups;\n  // ventilatorFlow: Flow;\n  flows = {};\n\n  constructor(\n  ) {\n  }\n\n  async getMobileUser() {\n    return clinical6.user;\n  }\n\n  async getEntries(permalink?: string, date?: string) {\n    let mobileUser = clinical6.user;\n      // set the filter\n      let filter = {};\n      if (permalink)\n        filter['entry_group_id'] = await this.getEntryGroupId(permalink);\n      if (date)\n        filter['date'] = date;\n      // mobileUserService.getEntries(mobileUser, null, 'networkFirst') // alternative\n      return await mobileUser.getEntries(filter, 'networkFirst');\n      // return mobileUser.getEntries(filter, 'cacheFirst');\n  }\n\n  // getEntryGroupsOrig() {\n  //   if (this.entryGroups) {\n  //     return new Promise<any> ( resolve => resolve(this.entryGroups) )\n  //   }\n  //   else {\n  //     const self = this;\n  //     return  eDiaryService.get('networkFirst') // should be cacheFirst\n  //       .then( entryGroups => {\n  //         console.log('EdiaryIonicService getEntryGroups', entryGroups);\n  //         self.entryGroups = entryGroups;\n  //         return entryGroups;\n  //       })\n  //   }\n  // }\n\n  async getEntryGroups() {\n    const self = this;    \n    const storageUtility = StorageUtility.instance;\n    const entryGroups = await storageUtility.get('ediary__entry_groups', {asArray: true});\n    // console.log('EdiaryIonicService getEntryGroups cache', entryGroups);\n    if (entryGroups.length > 0) \n      return entryGroups;\n    else {\n      console.log('getEntryGroups new', entryGroups);          \n      const _entryGroups = await eDiaryService.get('networkFirst');\n      // console.log('EdiaryIonicService getEntryGroups network', entryGroups);\n      // self.entryGroups = entryGroups;\n      return _entryGroups;\n    }\n  }\n\n  async getEntryGroupId(permalink) {\n    let id = null;\n    const entryGroups = await this.getEntryGroups();\n    if (entryGroups && isArray(entryGroups)) {\n      let entry = entryGroups.find( entry => entry.permanentLink === permalink);\n      if (entry)\n        id = entry.id;\n    }\n    return id;\n  }\n\n  async getEntryGroup(permalink: string) {\n    let entryGroup = null;\n    const entryGroups = await this.getEntryGroups();\n    if (entryGroups) {\n      entryGroup = entryGroups.find( entry => entry.permanentLink === permalink);\n    }\n    return entryGroup;\n  }\n\n  async getFlowFromEntry(entry) {\n    return entry.template.flow_process;\n  }\n\n  async getFlow(permalink: string) {\n    let localFlow = this.flows[permalink];\n    if (localFlow) {\n      localFlow.reset();\n      return localFlow;\n    }\n    const self = this;\n    const flow = await flowService.getFlow(permalink);\n    // set the capture of all the paths to false except the last one\n    // ... in case the flow is not properly set from the platform\n    for (let step of flow.steps)\n      for (let path of step['paths']) {\n        path.capture = false;\n      }\n    self.flows[permalink] = flow;\n    return flow;\n  }\n\n  async addRecord(permalink: string, flow: Flow, entryDate: string, templateId?: number) {\n    const self = this;\n    console.log('EdiaryIonicService addRecord');\n    const entry = await this.addEntry(permalink, entryDate, templateId);\n    const currEntry = (entry instanceof Entry) ? entry : entry['id'];\n\n    flow.entry = currEntry;\n    flow.owner = currEntry['owner'].id;\n\n    // check if the flow is the proper one\n    if (flow.id !== currEntry['template'].flow_process.id) {\n      console.warn('EdiaryIonicService addRecord, flow inconsistent with created entry', entry, flow);\n      throw new Error ('Something went wrong with the communications with the server. Details: EdiaryIonicService addRecord inconsistent flow.');\n    }\n    const flow_response = await flow.save();\n    return this.updateEntry(currEntry, flow, flow_response);\n    // return flow_response;\n  }\n\n  async updateEntry(entry, flow, flow_response) {\n    console.log('EdiaryIonicService updateEntry, flowResponse', flow_response);    \n      let responseData = flow_response.data;\n\n      console.log('EdiaryIonicService updateEntry, flowResponse data', responseData);\n\n      // add the captured_value_group objec to the entry object\n      // TODO, use proper setter and getter\n\n      if (!entry.template) entry['template'] = {};\n      entry.template.flow_process = flow;\n\n      if ( !entry.captured_value_group) {\n        entry.captured_value_group = { \n          id: parseInt(responseData.relationships.captured_value_group.data.id), \n          type: responseData.relationships.captured_value_group.data.type};\n      }\n      else {\n        entry.captured_value_group.id = parseInt(responseData.relationships.captured_value_group.data.id);\n      }\n      return entry;\n  }\n\n  // updateEntryNew(entry, flow_response) {\n  //   // Note: factory not yet supported\n  //   factory.get(flow_response)\n  //   .then( flowResponse => {\n  //     console.log('EdiaryIonicService updateEntryNew, flowResponse deserialized', flowResponse);\n  //     if ( !entry.captured_value_group)\n  //       entry.captured_value_group = { id: parseInt(flowResponse.relationships.captured_value_group.data.id), type: flowResponse.relationships.captured_value_group.data.type};\n  //     else\n  //       entry.captured_value_group.id = parseInt(flowResponse.relationships.captured_value_group.data.id);\n  //   })\n  //   .catch( err => {\n  //     console.log('EdiaryIonicService updateFlow deserialization error', err);\n  //   });\n  // }\n\n  async addEntry (permalink: string, entryDate: string, templateId?: number) {\n    let mobileUser = Client.instance.user;\n    // fetch the list of entryGroups\n\n    let entryGroup = await this.getEntryGroup(permalink);\n    if (!entryGroup)\n      throw 'Platform error: entryGroup ' + permalink + 'does not exist.';\n\n    let template;\n    if (templateId)\n      template = entryGroup.entry_templates.find( el => el.id == templateId);\n    else\n      template = entryGroup.entry_templates[0];\n      \n    let date = moment(entryDate).format('YYYY-MM-DD');\n    console.log('addEntry with date ' + date + ', from entryDate, template', entryDate, template);\n\n    return mobileUser.addEntry( {'date': date}, template );\n  }\n\n  async removeEntry (entry) {\n  }\n\n  async saveEntry ( entry ) {\n  }\n\n}\n"]}