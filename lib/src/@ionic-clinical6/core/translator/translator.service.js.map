{"version":3,"sources":["../src/@ionic-clinical6/core/translator/translator.service.ts"],"names":[],"mappings":"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","file":"translator.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Platform } from 'ionic-angular';\nimport { Observable } from 'rxjs';\nimport { clinical6, languageService, Language } from 'clinical6';\n\nexport type LanguageMap = { [id: string]: Language; };\n\n@Injectable()\nexport class TranslatorService {\n  language: Language;\n\n  languages: Array<Language>;\n\n  constructor(public http: Http,\n              public platform: Platform) {\n    // console.log('TranslatorService created');\n   }\n\n  // FOR FIRST LAUNCH OF TRANSLATOR\n  async init() {\n      const iso = localStorage.getItem('language_iso') || 'en';\n      this.language = new Language({ iso });\n\n      try {\n        const data = await this.language.getTranslations();\n        const langs: any = await languageService.get();\n        if (langs instanceof Array) {\n          this.languages = langs;\n        }\n        else if (langs instanceof Language) {\n          this.languages = [];\n          this.languages.push(langs);\n        }\n        // check if langs is a Language Map { [id: string]: Language; }\n        else if ( langs && langs instanceof Object) {\n\n            // this.languages = Object.values(langs);\n            // not sure why typescript do not understand Object Values\n            // using here the suggested polyfill\n            /* \n              const reduce = Function.bind.call(Function.call, Array.prototype.reduce);\n              const isEnumerable = Function.bind.call(Function.call, Object.prototype.propertyIsEnumerable);\n              const concat = Function.bind.call(Function.call, Array.prototype.concat);\n              const keys = Reflect.ownKeys;\n              if (!Object.values) {\n                Object.values = function values(O) {\n                  return reduce(keys(O), (v, k) => concat(v, typeof k === 'string' && isEnumerable(O, k) ? [O[k]] : []), []);\n                };\n              }\n            */\n            // this fails\n            // this.languages = Object.keys(langs).reduce( (v, k) => v.concat( typeof k === 'string' && langs.propertyIsEnumerable(k) ? [langs[k]] : [] ), []);\n          this.languages = Object.keys(langs).reduce( (v, k) => v.concat( typeof k === 'string' ? [langs[k]] : [] ), []);\n        }\n        else {\n          // Assert error\n          console.error('ionic-clinical6 TranslatorService init(). Assert error, this should be an unreachable branch', langs);\n        }\n      }\n      catch (reason) {\n        console.warn('ionic-clinical6 TranslatorService init(). Getting translation from service failed', reason);\n        return await this.getLocalTranslations(iso);\n      }\n  }\n\n  // CHANGE USED LANG AND RELOAD TRANSLATIONS\n  async setLanguage(iso: string) {\n\n      localStorage.setItem('language_iso', iso);\n      this.language = new Language({ iso });\n\n      try {\n        await this.language.getTranslations()\n      } catch(reason) {\n          console.warn('ionic-clinical6 setLanguage getting translation from service failed', reason)\n          return await this.getLocalTranslations(iso);\n      }\n  }\n\n  // CHANGE LANG ID ON PROFILE\n  async setProfileLang() {\n      const iso = localStorage.getItem('language_iso') || 'en';\n      try {\n        const profile = await clinical6.getProfile();\n        profile.language =  new Language({ iso });\n        await profile.save();\n      } catch (err) {\n        console.error(err);\n      }\n  }\n\n  // RTL SUPPORT\n  rtlMode(enable: boolean) {\n    if (enable) {\n       this.platform.setDir('rtl', true);\n    }\n    else {\n       this.platform.setDir('ltr', true);\n    }\n  }\n\n  // GET SUPPORTED LANGS FROM PLATFORM\n  async getLanguages(translations: boolean = true) {\n    return await languageService.getLanguages(translations);\n  }\n\n  // GET TRANSLATIONS FROM PLATFORM\n  async getTranslations(iso: string) {\n    return await languageService.getTranslations(iso);\n  }\n\n  // GET TRANSLATIONS FROM LOCAL\n  getLocalTranslations(id: string) {\n    return this.http.get('assets/i18n/' + id + '.json')\n      .map(res => res.json()).toPromise()\n      .catch(error => {\n        console.log('Translator Error (local): ' + error);\n        return Observable.throw('Could not load data from local');\n      })\n      .then(data => {\n        this.language._translations = data;\n        return data;\n      });\n  }\n\n  /**\n   * Retrieve a translation for the current language, optionally replacing tokenized\n   * values (e.g. '{{patientId}}') with tokens provided (e.g. { patientId: '123456' }).\n   * \n   * NOTE: Translations are typically wrapped in <p> tags.  Use `getInnerHTML` for the inner content\n   */\n  get(label: string, tokens: {[key: string]: any} = null) {\n    if (!this.language || !this.language._translations) {\n      return null;\n    }\n    let translation = null;\n    try {\n      translation = this.language.translate(label) || '';\n    } catch(error) {\n      console.log(error);\n    }\n\n    if (translation && tokens) {\n      // Replace tokens (e.g. {{patientId}}) with their values in the translated results.\n      translation = Object.keys(tokens)\n        .reduce((tran, tokenKey) => {\n          return this.replaceToken(tran, tokenKey, tokens[tokenKey]);\n        }, translation);\n    }\n    return translation;\n  }\n\n  private replaceToken(translation: string, tokenKey: string, tokenValue: any): string {\n    return translation.replace(`{{${tokenKey}}}`, tokenValue);\n  }\n\n  // THIS WILL BE CALLED TO REMOVE ALL\n  // HTML TAGS FROM VALUE\n  getInnerHTML(label: string, tokens: {[key: string]: any} = null) {\n    return this.htmlContent(this.get(label, tokens));\n  }\n\n  // HELP FUNCTION\n  htmlContent(html: any) {\n    if (!html || html === '') return '';\n    let template = document.createElement('template');\n    template.innerHTML = html;\n    return template.content.firstChild.textContent;\n  }\n}"]}