{"version":3,"names":[],"mappings":"","sources":["src/@ionic-clinical6/core/translator/translator.service.d.ts"],"sourcesContent":["import { Http } from '@angular/http';\nimport { Platform } from 'ionic-angular';\nimport { Language } from 'clinical6';\nexport declare type LanguageMap = {\n    [id: string]: Language;\n};\nexport declare class TranslatorService {\n    http: Http;\n    platform: Platform;\n    language: Language;\n    languages: Array<Language>;\n    constructor(http: Http, platform: Platform);\n    init(): Promise<any>;\n    setLanguage(iso: string): Promise<any>;\n    setProfileLang(): Promise<void>;\n    rtlMode(enable: boolean): void;\n    getLanguages(translations?: boolean): Promise<Language | {\n        [id: string]: Language;\n    }>;\n    getTranslations(iso: string): Promise<any>;\n    getLocalTranslations(id: string): Promise<any>;\n    /**\n     * Retrieve a translation for the current language, optionally replacing tokenized\n     * values (e.g. '{{patientId}}') with tokens provided (e.g. { patientId: '123456' }).\n     *\n     * NOTE: Translations are typically wrapped in <p> tags.  Use `getInnerHTML` for the inner content\n     */\n    get(label: string, tokens?: {\n        [key: string]: any;\n    }): any;\n    private replaceToken(translation, tokenKey, tokenValue);\n    getInnerHTML(label: string, tokens?: {\n        [key: string]: any;\n    }): string;\n    htmlContent(html: any): string;\n}\n"],"file":"translator.service.d.ts"}